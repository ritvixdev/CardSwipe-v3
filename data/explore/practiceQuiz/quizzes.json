{
  "quizzes": [
    {
      "id": "variables-quiz",
      "title": "Variables & Scope",
      "category": "Fundamentals",
      "difficulty": "easy",
      "timeLimit": 10,
      "passingScore": 70,
      "description": "Test your knowledge of JavaScript variables, scope, and declarations.",
      "questions": [
        {
          "id": "var-1",
          "question": "Which keyword creates a block-scoped variable that cannot be reassigned?",
          "options": ["var", "let", "const", "both let and const"],
          "correctAnswer": 2,
          "explanation": "const creates a block-scoped variable that cannot be reassigned after declaration."
        },
        {
          "id": "var-2",
          "question": "What is the scope of a variable declared with 'var'?",
          "options": ["Block scope", "Function scope", "Global scope", "Module scope"],
          "correctAnswer": 1,
          "explanation": "Variables declared with 'var' are function-scoped, meaning they are accessible throughout the entire function."
        },
        {
          "id": "var-3",
          "question": "What happens when you try to reassign a const variable?",
          "options": ["It works normally", "It throws a TypeError", "It creates a new variable", "It returns undefined"],
          "correctAnswer": 1,
          "explanation": "Attempting to reassign a const variable throws a TypeError because const variables cannot be reassigned."
        }
      ]
    },
    {
      "id": "arrays-quiz",
      "title": "Array Methods",
      "category": "Data Structures",
      "difficulty": "medium",
      "timeLimit": 15,
      "passingScore": 75,
      "description": "Master JavaScript array methods and their usage patterns.",
      "questions": [
        {
          "id": "arr-1",
          "question": "Which method creates a new array with all elements that pass a test?",
          "options": ["map()", "filter()", "forEach()", "reduce()"],
          "correctAnswer": 1,
          "explanation": "filter() creates a new array with all elements that pass the test implemented by the provided function."
        },
        {
          "id": "arr-2",
          "question": "What does the map() method return?",
          "options": ["The original array", "A new array with transformed elements", "undefined", "The first element"],
          "correctAnswer": 1,
          "explanation": "map() returns a new array with the results of calling a function for every array element."
        },
        {
          "id": "arr-3",
          "question": "Which method adds elements to the end of an array?",
          "options": ["unshift()", "push()", "pop()", "shift()"],
          "correctAnswer": 1,
          "explanation": "push() adds one or more elements to the end of an array and returns the new length."
        }
      ]
    },
    {
      "id": "functions-quiz",
      "title": "Functions & Scope",
      "category": "Fundamentals",
      "difficulty": "medium",
      "timeLimit": 12,
      "passingScore": 70,
      "description": "Test your understanding of JavaScript functions, parameters, and scope.",
      "questions": [
        {
          "id": "func-1",
          "question": "What is the main difference between function declarations and expressions?",
          "options": [
            "No difference",
            "Declarations are hoisted, expressions are not",
            "Expressions are faster",
            "Declarations can't have parameters"
          ],
          "correctAnswer": 1,
          "explanation": "Function declarations are hoisted (can be called before they're defined), while function expressions are not hoisted."
        },
        {
          "id": "func-2",
          "question": "What does 'this' refer to in an arrow function?",
          "options": [
            "The function itself",
            "The global object",
            "The enclosing scope",
            "undefined"
          ],
          "correctAnswer": 2,
          "explanation": "Arrow functions inherit 'this' from the enclosing scope, they don't have their own 'this' binding."
        }
      ]
    },
    {
      "id": "async-quiz",
      "title": "Asynchronous JavaScript",
      "category": "Asynchronous",
      "difficulty": "hard",
      "timeLimit": 20,
      "passingScore": 80,
      "description": "Challenge your knowledge of promises, async/await, and asynchronous programming.",
      "questions": [
        {
          "id": "async-1",
          "question": "What is the correct way to handle errors with async/await?",
          "options": [
            "Use .catch() method",
            "Use try/catch blocks",
            "Use error callbacks",
            "Errors are handled automatically"
          ],
          "correctAnswer": 1,
          "explanation": "With async/await, you should use try/catch blocks to handle both synchronous and asynchronous errors."
        },
        {
          "id": "async-2",
          "question": "What does Promise.all() do?",
          "options": [
            "Runs promises sequentially",
            "Runs promises in parallel and waits for all to complete",
            "Returns the first resolved promise",
            "Cancels all promises"
          ],
          "correctAnswer": 1,
          "explanation": "Promise.all() runs all promises in parallel and resolves when all input promises resolve, or rejects if any input promise rejects."
        }
      ]
    },
    {
      "id": "objects-quiz",
      "title": "Objects & Prototypes",
      "category": "Object-Oriented",
      "difficulty": "hard",
      "timeLimit": 18,
      "passingScore": 75,
      "description": "Deep dive into JavaScript objects, prototypes, and inheritance.",
      "questions": [
        {
          "id": "obj-1",
          "question": "What does the 'this' keyword refer to in an object method?",
          "options": [
            "The global object",
            "The function itself",
            "The object that owns the method",
            "undefined"
          ],
          "correctAnswer": 2,
          "explanation": "In an object method, 'this' refers to the object that owns the method."
        },
        {
          "id": "obj-2",
          "question": "How do you create an object that inherits from another object?",
          "options": [
            "Object.create()",
            "Object.assign()",
            "Object.keys()",
            "Object.values()"
          ],
          "correctAnswer": 0,
          "explanation": "Object.create() creates a new object with the specified prototype object and properties."
        }
      ]
    }
  ],
  "categories": [
    "Fundamentals",
    "Data Structures",
    "Asynchronous",
    "Object-Oriented",
    "Modern JavaScript"
  ]
}
