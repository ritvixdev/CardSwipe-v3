{
  "interviewQuizzes": [
    {
      "id": "senior-js-interview",
      "title": "Senior JavaScript Developer",
      "category": "Advanced Interview",
      "difficulty": "hard",
      "timeLimit": 30,
      "passingScore": 85,
      "description": "Real questions asked in senior JavaScript developer interviews at top tech companies.",
      "questions": [
        {
          "id": "closure-practical",
          "question": "What will this code output and why?",
          "codeSnippet": "for (var i = 0; i < 3; i++) {\n  setTimeout(() => {\n    console.log(i);\n  }, 100);\n}",
          "options": ["0, 1, 2", "3, 3, 3", "undefined, undefined, undefined", "Error"],
          "correctAnswer": 1,
          "explanation": "Due to closure and var's function scoping, all setTimeout callbacks reference the same 'i' variable, which has value 3 after the loop completes. Use let or IIFE to fix this."
        },
        {
          "id": "this-context",
          "question": "What will obj.method() log?",
          "codeSnippet": "const obj = {\n  name: 'Object',\n  method() {\n    const inner = () => {\n      console.log(this.name);\n    };\n    inner();\n  }\n};",
          "options": ["'Object'", "undefined", "Error", "null"],
          "correctAnswer": 0,
          "explanation": "Arrow functions inherit 'this' from their enclosing scope. Since the arrow function is inside the method, it inherits 'this' from the method, which refers to obj."
        },
        {
          "id": "promise-execution",
          "question": "What is the output order?",
          "codeSnippet": "console.log('1');\nsetTimeout(() => console.log('2'), 0);\nPromise.resolve().then(() => console.log('3'));\nconsole.log('4');",
          "options": ["1, 2, 3, 4", "1, 4, 2, 3", "1, 4, 3, 2", "1, 3, 4, 2"],
          "correctAnswer": 2,
          "explanation": "Synchronous code runs first (1, 4), then microtasks like Promises (3), then macrotasks like setTimeout (2)."
        },
        {
          "id": "prototype-chain",
          "question": "What will person.toString() return?",
          "codeSnippet": "function Person(name) {\n  this.name = name;\n}\nPerson.prototype.toString = function() {\n  return this.name;\n};\nconst person = new Person('John');\ndelete person.toString;",
          "options": ["'John'", "undefined", "[object Object]", "Error"],
          "correctAnswer": 0,
          "explanation": "delete person.toString removes the property from the instance, but the method still exists on Person.prototype, so it will be found via prototype chain lookup."
        }
      ]
    },
    {
      "id": "react-js-interview",
      "title": "React + JavaScript Interview",
      "category": "Frontend Interview",
      "difficulty": "medium",
      "timeLimit": 25,
      "passingScore": 80,
      "description": "Common questions from React and JavaScript interviews at frontend-focused companies.",
      "questions": [
        {
          "id": "array-methods",
          "question": "Which array method should you use to transform data for rendering in React?",
          "options": ["forEach()", "map()", "filter()", "reduce()"],
          "correctAnswer": 1,
          "explanation": "map() returns a new array with transformed elements, which is perfect for rendering lists in React. forEach() doesn't return anything."
        },
        {
          "id": "async-await-error",
          "question": "How do you properly handle errors with async/await?",
          "options": [
            "Use .catch() method",
            "Use try/catch blocks",
            "Use error callbacks",
            "Errors are handled automatically"
          ],
          "correctAnswer": 1,
          "explanation": "With async/await, you should use try/catch blocks to handle both synchronous and asynchronous errors."
        },
        {
          "id": "object-destructuring",
          "question": "What's the correct way to destructure with default values?",
          "options": [
            "const {name = 'Default'} = obj;",
            "const {name || 'Default'} = obj;", 
            "const {name: 'Default'} = obj;",
            "const {name} = obj || 'Default';"
          ],
          "correctAnswer": 0,
          "explanation": "Use = to assign default values in destructuring: {name = 'Default'} will use 'Default' if name is undefined."
        },
        {
          "id": "event-delegation",
          "question": "What is event delegation and why is it useful?",
          "options": [
            "Adding events to each element",
            "Using one event listener on a parent element",
            "Preventing event bubbling",
            "Creating custom events"
          ],
          "correctAnswer": 1,
          "explanation": "Event delegation uses one event listener on a parent element to handle events for multiple child elements, improving performance and handling dynamic content."
        }
      ]
    },
    {
      "id": "node-js-interview", 
      "title": "Node.js Backend Interview",
      "category": "Backend Interview",
      "difficulty": "hard",
      "timeLimit": 35,
      "passingScore": 80,
      "description": "Questions commonly asked in Node.js and backend JavaScript interviews.",
      "questions": [
        {
          "id": "callback-vs-promise",
          "question": "What's the main advantage of Promises over callbacks in Node.js?",
          "options": [
            "Promises are faster",
            "Better error handling and avoiding callback hell",
            "Promises use less memory",
            "Callbacks are deprecated"
          ],
          "correctAnswer": 1,
          "explanation": "Promises provide better error handling with .catch() and avoid callback hell through chaining, making asynchronous code more readable and maintainable."
        },
        {
          "id": "module-exports",
          "question": "What's the difference between module.exports and exports?",
          "options": [
            "No difference",
            "exports is a reference to module.exports",
            "module.exports is faster",
            "exports is for ES6 modules"
          ],
          "correctAnswer": 1,
          "explanation": "exports is a reference to module.exports. Reassigning exports breaks the reference, while module.exports is what actually gets exported."
        },
        {
          "id": "buffer-vs-string",
          "question": "When should you use Buffer instead of String in Node.js?",
          "options": [
            "Always use Buffer",
            "For binary data and file operations",
            "For better performance",
            "For Unicode text"
          ],
          "correctAnswer": 1,
          "explanation": "Buffer is used for binary data, file operations, and when you need to work with raw bytes. Strings are for text data."
        }
      ]
    },
    {
      "id": "algorithm-interview",
      "title": "JavaScript Algorithms",
      "category": "Algorithm Interview", 
      "difficulty": "hard",
      "timeLimit": 40,
      "passingScore": 75,
      "description": "Algorithm and data structure questions using JavaScript.",
      "questions": [
        {
          "id": "time-complexity",
          "question": "What's the time complexity of Array.indexOf()?",
          "options": ["O(1)", "O(log n)", "O(n)", "O(nÂ²)"],
          "correctAnswer": 2,
          "explanation": "Array.indexOf() performs a linear search through the array, so it has O(n) time complexity in the worst case."
        },
        {
          "id": "fibonacci-optimization",
          "question": "Which approach is most efficient for calculating Fibonacci numbers?",
          "options": [
            "Recursive",
            "Recursive with memoization",
            "Iterative",
            "Using built-in Math functions"
          ],
          "correctAnswer": 2,
          "explanation": "Iterative approach is most efficient with O(n) time and O(1) space. Memoization is O(n) time and space, while naive recursion is O(2^n)."
        },
        {
          "id": "array-flattening",
          "question": "What's the most efficient way to flatten a nested array?",
          "options": [
            "array.flat(Infinity)",
            "JSON.parse(JSON.stringify())",
            "Recursive function",
            "Using reduce and concat"
          ],
          "correctAnswer": 0,
          "explanation": "array.flat(Infinity) is the most efficient and readable way to flatten deeply nested arrays in modern JavaScript."
        }
      ]
    }
  ],
  "categories": [
    "Advanced Interview",
    "Frontend Interview", 
    "Backend Interview",
    "Algorithm Interview",
    "System Design",
    "Performance"
  ]
}
