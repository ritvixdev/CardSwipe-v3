{
  "cards": [
    {
      "id": "dom-manipulation",
      "title": "DOM Manipulation: Controlling Web Pages",
      "day": 21,
      "category": "Web Development",
      "difficulty": "intermediate",
      "estimatedTime": "5 min",
      "description": "Master the Document Object Model and learn to dynamically control web pages.",
      "content": "## DOM Manipulation: Control Web Pages\n\n### **What is the DOM?**\n- **Document Object Model**: Tree representation of HTML\n- **Live structure**: Changes reflect immediately\n- **JavaScript interface**: Programmatic HTML access\n- **Foundation**: Basis for all web frameworks\n\n### **Element Selection**\n- **`querySelector()`**: First matching CSS selector\n- **`querySelectorAll()`**: All matching elements\n- **`getElementById()`**: Fastest for ID selection\n\n### **Content Manipulation**\n- **`textContent`**: Plain text (XSS safe)\n- **`innerHTML`**: HTML content (XSS risk)\n- **`setAttribute()`**: Set attribute values\n\n### **CSS Class Management**\n- **`classList.add()`**: Add CSS class\n- **`classList.remove()`**: Remove CSS class\n- **`classList.toggle()`**: Toggle CSS class\n\n### **Creating Elements**\n- **`createElement()`**: Create new element\n- **`appendChild()`**: Add to DOM tree\n- **`remove()`**: Remove from DOM\n\n### **Best Practice**\nUse CSS classes over inline styles for better maintainability",
      "contentDetails": "## DOM Manipulation Mastery\n\n### **Understanding the DOM**\n- **Document Object Model**: Tree representation of HTML\n- **Live structure**: Changes reflect immediately in browser\n- **JavaScript interface**: Programmatic access to HTML elements\n- **Foundation**: Basis for all modern web frameworks\n\n### **Element Selection**\n\n#### **Modern Methods** (Preferred)\n- **`querySelector()`**: First element matching CSS selector\n- **`querySelectorAll()`**: All elements matching CSS selector\n- **Flexible**: Supports any CSS selector syntax\n\n#### **Legacy Methods** (Still useful)\n- **`getElementById()`**: Fastest for ID selection\n- **`getElementsByClassName()`**: Live HTMLCollection\n- **`getElementsByTagName()`**: Live HTMLCollection\n\n### **Element Creation & Modification**\n\n#### **Creating Elements**\n```javascript\nconst element = document.createElement('div');\nelement.textContent = 'Hello World';\nelement.className = 'my-class';\nelement.id = 'my-id';\n```\n\n#### **Content Manipulation**\n- **`textContent`**: Plain text (safe from XSS)\n- **`innerHTML`**: HTML content (XSS risk)\n- **`innerText`**: Visible text (respects CSS)\n\n#### **Attribute Management**\n- **`setAttribute()`**: Set attribute value\n- **`getAttribute()`**: Get attribute value\n- **`removeAttribute()`**: Remove attribute\n- **`hasAttribute()`**: Check if attribute exists\n\n### **CSS Class Management**\n\n#### **classList Methods**\n- **`add()`**: Add CSS class\n- **`remove()`**: Remove CSS class\n- **`toggle()`**: Toggle CSS class\n- **`contains()`**: Check if class exists\n- **`replace()`**: Replace one class with another\n\n### **DOM Tree Manipulation**\n\n#### **Adding Elements**\n- **`appendChild()`**: Add as last child\n- **`insertBefore()`**: Insert at specific position\n- **`prepend()`**: Add as first child (modern)\n- **`append()`**: Add multiple elements (modern)\n\n#### **Removing Elements**\n- **`remove()`**: Remove element (modern)\n- **`removeChild()`**: Remove child element (legacy)\n\n### **Style Manipulation**\n\n#### **Inline Styles**\n```javascript\nelement.style.color = 'red';\nelement.style.fontSize = '16px';\nelement.style.backgroundColor = 'blue';\n```\n\n#### **CSS Classes** (Preferred)\n```javascript\nelement.classList.add('highlighted');\nelement.classList.toggle('active');\n```\n\n### **Best Practices**\n- **Use CSS classes** over inline styles\n- **Cache DOM queries** for better performance\n- **Use event delegation** for dynamic content\n- **Validate elements exist** before manipulation\n- **Prefer modern methods** (`querySelector`, `remove`)",
      "codeExample": "// Selecting elements (modern methods)\nconst header = document.querySelector('h1');\nconst allButtons = document.querySelectorAll('button');\nconst byId = document.getElementById('myElement');\nconst byClass = document.getElementsByClassName('myClass');\n\n// Creating and modifying elements\nconst newDiv = document.createElement('div');\nnewDiv.textContent = 'Hello, DOM!';\nnewDiv.className = 'dynamic-content';\nnewDiv.style.color = 'blue';\nnewDiv.style.fontSize = '18px';\n\n// Adding elements to the page\ndocument.body.appendChild(newDiv);\n\n// Modifying existing elements\nheader.textContent = 'Updated Title';\nheader.classList.add('highlighted');\nheader.setAttribute('data-updated', 'true');\n\n// Event handling\nallButtons.forEach(button => {\n  button.addEventListener('click', (event) => {\n    console.log('Button clicked:', event.target.textContent);\n    event.target.style.backgroundColor = 'green';\n  });\n});\n\n// Removing elements\nconst oldElement = document.querySelector('.old-content');\nif (oldElement) {\n  oldElement.remove(); // Modern way\n  // oldElement.parentNode.removeChild(oldElement); // Old way\n}\n\n// Modern DOM manipulation patterns\nfunction createCard(title, content) {\n  const card = document.createElement('div');\n  card.className = 'card';\n  card.innerHTML = `\n    <h3>${title}</h3>\n    <p>${content}</p>\n    <button onclick=\"this.parentElement.remove()\">Delete</button>\n  `;\n  return card;\n}\n\n// Add multiple cards\nconst container = document.querySelector('#cards-container');\nconst cards = [\n  { title: 'Card 1', content: 'First card content' },\n  { title: 'Card 2', content: 'Second card content' }\n];\n\ncards.forEach(cardData => {\n  const card = createCard(cardData.title, cardData.content);\n  container.appendChild(card);\n});",
      "keyPoints": [
        "Use querySelector/querySelectorAll for modern element selection",
        "createElement and appendChild for adding new elements",
        "addEventListener for handling user interactions",
        "classList methods for managing CSS classes dynamically"
      ],
      "quiz": {
        "question": "What's the modern way to select the first element with class 'button'?",
        "options": ["document.getElementsByClassName('button')[0]", "document.querySelector('.button')", "document.getElementByClass('button')", "document.findElement('.button')"],
        "correctAnswer": 1,
        "explanation": "document.querySelector('.button') is the modern way to select the first element with class 'button'. It uses CSS selector syntax."
      },
      "tags": ["dom", "manipulation", "elements", "events"],
      "isCompleted": false,
      "isBookmarked": false
    },
    {
      "id": "event-handling",
      "title": "Event Handling: Making Web Pages Interactive",
      "day": 23,
      "category": "Web Development",
      "difficulty": "intermediate",
      "estimatedTime": "6 min",
      "description": "Master JavaScript events to create responsive, interactive web applications.",
      "content": "## Event Handling: Interactive Web Apps\n\n### **Event Fundamentals**\n- **Event-driven programming**: Code responds to user actions\n- **Event object**: Contains information about what happened\n- **Asynchronous**: Events don't block code execution\n\n### **Adding Event Listeners**\n- **Modern method**: `addEventListener('click', handler)`\n- **Multiple handlers**: Can add multiple for same event\n- **Event options**: Capture, once, passive\n\n### **Common Event Types**\n- **Mouse**: `click`, `dblclick`, `mouseover`, `mouseout`\n- **Keyboard**: `keydown`, `keyup`\n- **Form**: `submit`, `input`, `change`, `focus`, `blur`\n- **Window**: `load`, `DOMContentLoaded`, `resize`, `scroll`\n\n### **Event Object Properties**\n- **`event.target`**: Element that triggered event\n- **`event.type`**: Event type ('click', 'keydown')\n- **`event.preventDefault()`**: Stop default behavior\n- **`event.stopPropagation()`**: Stop event bubbling\n\n### **Event Delegation**\n- **Single listener**: On parent element\n- **Handle children**: Using `event.target`\n- **Dynamic content**: Works with elements added later\n\n### **Best Practice**\nUse `addEventListener` instead of `onclick` attributes",
      "contentDetails": "## JavaScript Event Handling Complete Guide\n\n### **Event Fundamentals**\n- **Event-driven programming**: Code responds to user actions\n- **Event object**: Contains information about what happened\n- **Event flow**: Capture → Target → Bubble phases\n- **Asynchronous**: Events don't block code execution\n\n### **Adding Event Listeners**\n\n#### **Modern Method** (Preferred)\n```javascript\nelement.addEventListener('click', handler);\nelement.addEventListener('click', handler, options);\n```\n\n#### **Benefits of addEventListener**\n- **Multiple handlers**: Can add multiple listeners for same event\n- **Event options**: Capture, once, passive options\n- **Easy removal**: `removeEventListener()`\n- **Better separation**: Keeps HTML and JavaScript separate\n\n### **Common Event Types**\n\n#### **Mouse Events**\n- **`click`**: Mouse click or tap\n- **`dblclick`**: Double click\n- **`mousedown/mouseup`**: Mouse button press/release\n- **`mouseover/mouseout`**: Mouse enter/leave element\n- **`mouseenter/mouseleave`**: Like over/out but no bubbling\n\n#### **Keyboard Events**\n- **`keydown`**: Key pressed down\n- **`keyup`**: Key released\n- **`keypress`**: Key pressed (deprecated)\n\n#### **Form Events**\n- **`submit`**: Form submitted\n- **`input`**: Input value changed\n- **`change`**: Input loses focus after change\n- **`focus/blur`**: Element gains/loses focus\n\n#### **Window Events**\n- **`load`**: Page fully loaded\n- **`DOMContentLoaded`**: HTML parsed (faster than load)\n- **`resize`**: Window resized\n- **`scroll`**: Page scrolled\n\n### **Event Object Properties**\n\n#### **Common Properties**\n- **`event.type`**: Event type ('click', 'keydown', etc.)\n- **`event.target`**: Element that triggered event\n- **`event.currentTarget`**: Element with event listener\n- **`event.timeStamp`**: When event occurred\n\n#### **Mouse Event Properties**\n- **`event.clientX/clientY`**: Mouse position relative to viewport\n- **`event.pageX/pageY`**: Mouse position relative to document\n- **`event.button`**: Which mouse button (0=left, 1=middle, 2=right)\n\n#### **Keyboard Event Properties**\n- **`event.key`**: Key pressed ('Enter', 'a', 'ArrowUp')\n- **`event.code`**: Physical key ('KeyA', 'Enter')\n- **`event.ctrlKey/shiftKey/altKey`**: Modifier keys pressed\n\n### **Event Control Methods**\n\n#### **`preventDefault()`**\n- **Purpose**: Stop default browser behavior\n- **Examples**: Prevent form submission, link navigation\n- **Use case**: Custom form validation\n\n#### **`stopPropagation()`**\n- **Purpose**: Stop event from bubbling up\n- **Use case**: Prevent parent handlers from firing\n\n#### **`stopImmediatePropagation()`**\n- **Purpose**: Stop all other handlers on same element\n- **Use case**: Priority event handling\n\n### **Event Delegation**\n\n#### **Concept**\n- **Single listener**: On parent element\n- **Handle children**: Using event.target\n- **Dynamic content**: Works with elements added later\n- **Performance**: Fewer event listeners\n\n#### **Example Pattern**\n```javascript\ncontainer.addEventListener('click', (e) => {\n  if (e.target.matches('.button')) {\n    // Handle button click\n  }\n});\n```\n\n### **Custom Events**\n\n#### **Creating Custom Events**\n```javascript\nconst customEvent = new CustomEvent('myEvent', {\n  detail: { data: 'custom data' }\n});\n```\n\n#### **Dispatching Events**\n```javascript\nelement.dispatchEvent(customEvent);\n```\n\n### **Best Practices**\n- **Use addEventListener**: Instead of onclick attributes\n- **Remove listeners**: When elements are removed\n- **Use event delegation**: For dynamic content\n- **Debounce/throttle**: For high-frequency events (scroll, resize)\n- **Check event.target**: Before acting on events",
      "codeExample": "// Basic event handling\nconst button = document.querySelector('#myButton');\nbutton.addEventListener('click', function(event) {\n  console.log('Button clicked!');\n  console.log('Event type:', event.type);\n  console.log('Target element:', event.target);\n});\n\n// Modern arrow function syntax\nbutton.addEventListener('click', (e) => {\n  e.preventDefault(); // Prevent default behavior\n  e.stopPropagation(); // Stop event bubbling\n  console.log('Modern event handler');\n});\n\n// Multiple event types\nconst input = document.querySelector('#textInput');\ninput.addEventListener('focus', () => console.log('Input focused'));\ninput.addEventListener('blur', () => console.log('Input lost focus'));\ninput.addEventListener('input', (e) => {\n  console.log('Input value:', e.target.value);\n});\n\n// Keyboard events\ndocument.addEventListener('keydown', (e) => {\n  if (e.key === 'Enter') {\n    console.log('Enter key pressed');\n  }\n  if (e.ctrlKey && e.key === 's') {\n    e.preventDefault(); // Prevent browser save\n    console.log('Ctrl+S pressed - custom save!');\n  }\n});\n\n// Form handling\nconst form = document.querySelector('#myForm');\nform.addEventListener('submit', (e) => {\n  e.preventDefault(); // Prevent page reload\n  \n  const formData = new FormData(form);\n  const data = Object.fromEntries(formData);\n  console.log('Form data:', data);\n  \n  // Validate and submit\n  if (data.email && data.password) {\n    console.log('Form is valid, submitting...');\n  } else {\n    console.log('Please fill all fields');\n  }\n});\n\n// Event delegation (efficient for dynamic content)\nconst container = document.querySelector('#dynamic-container');\ncontainer.addEventListener('click', (e) => {\n  if (e.target.classList.contains('delete-btn')) {\n    e.target.closest('.item').remove();\n  }\n  if (e.target.classList.contains('edit-btn')) {\n    const item = e.target.closest('.item');\n    const text = item.querySelector('.text');\n    text.contentEditable = true;\n    text.focus();\n  }\n});\n\n// Custom events\nconst customEvent = new CustomEvent('userLoggedIn', {\n  detail: { username: 'alice', timestamp: Date.now() }\n});\n\ndocument.addEventListener('userLoggedIn', (e) => {\n  console.log('User logged in:', e.detail.username);\n});\n\n// Trigger custom event\ndocument.dispatchEvent(customEvent);",
      "keyPoints": [
        "Use addEventListener for modern event handling",
        "preventDefault() stops default browser behavior",
        "Event delegation is efficient for dynamic content",
        "Custom events enable component communication"
      ],
      "quiz": {
        "question": "What does event.stopPropagation() do?",
        "options": ["Prevents default browser behavior", "Stops the event from bubbling up", "Removes the event listener", "Cancels the event"],
        "correctAnswer": 1,
        "explanation": "event.stopPropagation() prevents the event from bubbling up to parent elements, stopping the event propagation chain."
      },
      "tags": ["events", "interaction", "forms", "delegation"],
      "isCompleted": false,
      "isBookmarked": false
    }
  ]
}
