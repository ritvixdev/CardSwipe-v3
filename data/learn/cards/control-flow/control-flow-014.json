{
  "metadata": {
    "fileId": "control-flow-014",
    "topic": "control-flow",
    "subtopic": "14_day_error-handling_methods",
    "partNumber": 1,
    "totalParts": 1,
    "cardCount": 3,
    "difficulty": "intermediate",
    "estimatedTime": "9 min",
    "prerequisites": [
      "day-13"
    ],
    "tags": [
      "control-flow",
      "day-14"
    ],
    "version": "1.0.0",
    "createdAt": "2025-08-07T08:51:50.096Z",
    "updatedAt": "2025-08-07T08:51:50.096Z"
  },
  "cards": [
    {
      "id": "control-flow-014-001",
      "title": "14_day_Error Handling_methods",
      "day": 14,
      "category": "control-flow",
      "difficulty": "intermediate",
      "estimatedTime": "3 min",
      "description": "<div align=\"center\">\n  <h1> 30 Days Of JavaScript: Error handling</h1>\n  <a class=\"header-badge\" target=\"_blank\" href=\"https://www....",
      "content": "<div align=\"center\">\n  <h1> 30 Days Of JavaScript: Error handling</h1>\n  <a class=\"header-badge\" target=\"_blank\" href=\"https://www.linkedin.com/in/asabeneh/\">\n  <img src=\"https://img.shields.io/badge/style--5eba00.svg?label=LinkedIn&logo=linkedin&style=social\">\n  </a>\n  <a class=\"header-badge\" target=\"_blank\" href=\"https://twitter.com/Asabeneh\">\n  <img alt=\"Twitter Follow\" src=\"https://img.shields.io/twitter/follow/asabeneh?style=social\">\n  </a>\n\n<sub>Author:\n<a href=\"https://www.linkedin.com/in/asabeneh/\" target=\"_blank\">Asabeneh Yetayeh</a><br>\n<small> January, 2020</small>\n</sub>\n\n</div>\n\n[<< Day 13](../13_Day_Console_object_methods/13_day_console_object_methods.md) | [Day 15>>](../15_Day_Classes/15_day_classes.md)\n\n![Thirty Days Of JavaScript](../images/banners/day_1_14.png)\n\n- [Day 14](day-14)\n\t- [Error Handling](error-handling)\n\t\t- [Error Types](error-types)\n\t- [Exercises](exercises)\n\t\t- [Exercises:Level 1](exerciseslevel-1)\n\t\t- [Exercises: Level 2](exercises-level-2)\n\t\t- [Exercises:Level](exerciseslevel)\n\nDay 14",
      "codeExample": "try {\n  // code that may throw an error\n} catch (err) {\n  // code to be executed if an error occurs\n} finally {\n  // code to be executed regardless of an error occurs or not\n}",
      "keyPoints": [
        "[Day 14](#day-14)",
        "[Error Handling](#error-handling)",
        "[Error Types](#error-types)",
        "[Exercises](#exercises)"
      ],
      "quiz": {
        "question": "What is the main concept covered in this lesson?",
        "options": [
          "Option A",
          "Option B",
          "Option C",
          "Option D"
        ],
        "correctAnswer": 0,
        "explanation": "This covers the main concept discussed in the lesson."
      },
      "tags": [
        "control-flow",
        "day-14"
      ]
    },
    {
      "id": "control-flow-014-002",
      "title": "14_day_Error Handling_methods - Part 2",
      "day": 14,
      "category": "control-flow",
      "difficulty": "intermediate",
      "estimatedTime": "2 min",
      "description": "Error Handling\n\nJavaScript is a loosely-typed language....",
      "content": "Error Handling\n\nJavaScript is a loosely-typed language. Some times you will get a runtime error when you try to access an undefined variable or call undefined function etc.\n\nJavaScript similar to python or Java provides an error-handling mechanism to catch runtime errors using try-catch-finally block.\n\n`js\ntry {\n  // code that may throw an error\n} catch (err) {\n  // code to be executed if an error occurs\n} finally {\n  // code to be executed regardless of an error occurs or not\n}\n`\n\ntry: wrap suspicious code that may throw an error in try block.The try statement allows us to define a block of code to be tested for errors while it is being executed.\n\ncatch: write code to do something in catch block when an error occurs. The catch block can have parameters that will give you error information. Catch block is used to log an error or display specific messages to the user.\n\nfinally: finally block will always be executed regardless of the occurrence of an error. The finally block can be used to complete the remaining task or reset variables that might have changed before error occurred in try block.\n\nExample:\n\n`js\ntry {\n  let lastName = 'Yetayeh'\n  let fullName = fistName + ' ' + lastName\n} catch (err) {\n  console.log(err)\n}\n`\n\n`sh\nReferenceError: fistName is not defined\n    at <anonymous>:4:20\n`\n\n`js\ntry {\n  let lastName = 'Yetayeh'\n  let fullName = fistName + ' ' + lastName\n} catch (err) {\n  console.error(err) // we can use console.log() or console.error()\n} finally {\n  console.log('In any case I will be executed')\n}\n`\n\n`sh\nReferenceError: fistName is not defined\n    at <anonymous>:4:20\nIn any case it  will be executed\n`\nThe catch block take a parameter. It is common to pass e, err or error as a parameter to the catch block. This parameter is an object and it has name and message keys. Lets use the name and message.\n`js\ntry {\n  let lastName = 'Yetayeh'\n  let fullName = fistName + ' ' + lastName\n} catch (err) {\n  console.log('Name of the error', err.name)\n  console.log('Error message', err.message)\n} finally {\n  console.log('In any case I will be executed')\n}\n`\n`sh\nName of the error ReferenceError\nError message fistName is not defined\nIn any case I will be executed\n`\nthrow: the throw statement allows us to create a custom error. We can through a string, number, boolean or an object. Use the throw statement to throw an exception. When you throw an exception, expression specifies the value of the exception. Each of the following throws an exception:\n`js\nthrow 'Error2' // generates an exception with a string value\nthrow 42 // generates an exception with the value 42\nthrow true // generates an exception with the value true\nthrow new Error('Required') // generates an error object with the message of Required\n`\n`js\nconst throwErrorExampleFun = () => {\n  let message\n  let x = prompt('Enter a number: ')\n  try {\n    if (x == '') throw 'empty'\n    if (isNaN(x)) throw 'not a number'\n    x = Number(x)\n    if (x < 5) throw 'too low'\n    if (x > 10) throw 'too high'\n  } catch (err) {\n    console.log(err)\n  }\n}\nthrowErrorExampleFun()\n`\nError Types\n- ReferenceError: An illegal reference has occurred. A ReferenceError is thrown if we use a variable that has not been declared.\n`js\nlet firstName = 'Asabeneh'\nlet fullName = firstName + ' ' + lastName\nconsole.log(fullName)\n`\n`sh\nUncaught ReferenceError: lastName is not defined\n    at <anonymous>:2:35\n`\n- SyntaxError: A syntax error has occurred\n`js\nlet square = 2 x 2\nconsole.log(square)\nconsole.log('Hello, world\")\n`\n`sh\nUncaught SyntaxError: Unexpected identifier\n`\n- TypeError: A type error has occurred\n`js\nlet num = 10\nconsole.log(num.toLowerCase())\n`\n`sh\nUncaught TypeError: num.toLowerCase is not a function\n    at <anonymous>:2:17\n`\nThese are some of the common error you may face when you write a code. Understanding errors can help you to know what mistakes you made and it will help you to debug your code fast.\nðŸŒ• You are flawless. Now, you knew how to handle errors and you can write robust application which handle unexpected user inputs. You have just completed day 14 challenges and you are 14 steps a head in to your way to greatness. Now do some exercises for your brain and for your muscle.",
      "codeExample": "try {\n  // code that may throw an error\n} catch (err) {\n  // code to be executed if an error occurs\n} finally {\n  // code to be executed regardless of an error occurs or not\n}",
      "keyPoints": [
        "ReferenceError: An illegal reference has occurred. A ReferenceError is thrown if we use a variable that has not been declared.",
        "SyntaxError: A syntax error has occurred",
        "TypeError: A type error has occurred"
      ],
      "quiz": {
        "question": "What is the main concept covered in this lesson?",
        "options": [
          "Option A",
          "Option B",
          "Option C",
          "Option D"
        ],
        "correctAnswer": 0,
        "explanation": "This covers the main concept discussed in the lesson."
      },
      "tags": [
        "control-flow",
        "day-14"
      ]
    },
    {
      "id": "control-flow-014-003",
      "title": "14_day_Error Handling_methods - Part 3",
      "day": 14,
      "category": "control-flow",
      "difficulty": "intermediate",
      "estimatedTime": "2 min",
      "description": "Exercises\n### Exercises:Level 1\nPractice\n### Exercises: Level 2\nPractice\n### Exercises:Level\nPractice\nðŸŽ‰ CONGRATULATIONS !...",
      "content": "Exercises\nExercises:Level 1\nPractice\nExercises: Level 2\nPractice\nExercises:Level\nPractice\nðŸŽ‰ CONGRATULATIONS ! ðŸŽ‰\n[<< Day 13](../13_Day_Console_object_methods/13_day_console_object_methods.md) | [Day 15>>](../15_Day_Classes/15_day_classes.md)",
      "codeExample": "",
      "keyPoints": [
        "Key concept from this lesson",
        "Important implementation detail",
        "Best practice to remember",
        "Common use case"
      ],
      "quiz": {
        "question": "What is the main concept covered in this lesson?",
        "options": [
          "Option A",
          "Option B",
          "Option C",
          "Option D"
        ],
        "correctAnswer": 0,
        "explanation": "This covers the main concept discussed in the lesson."
      },
      "tags": [
        "control-flow",
        "day-14"
      ]
    }
  ]
}