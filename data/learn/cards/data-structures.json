{
  "cards": [
    {
      "id": "variables-evolution",
      "title": "Variables: From var to let to const",
      "day": 2,
      "category": "Data Structures",
      "difficulty": "beginner",
      "estimatedTime": "4 min",
      "description": "Master the evolution of JavaScript variables and when to use each type.",
      "content": "## Variable Evolution: var → let → const\n\n### **var - The Legacy Declaration (Avoid!)**\n- **Function-scoped**: Available throughout entire function, not just block\n- **Hoisting behavior**: Can be used before declaration (returns undefined)\n- **Redeclaration allowed**: Can accidentally overwrite existing variables\n- **No block scope**: Variables leak out of if/for/while blocks\n- **Global pollution**: Creates properties on window object\n- **Memory issues**: Can cause unexpected closures and memory leaks\n- **Temporal dead zone**: None - can access before declaration\n\n### **let - The Modern Variable**\n- **Block-scoped**: Only available within curly brace blocks\n- **No hoisting**: Must be declared before use (ReferenceError if not)\n- **No redeclaration**: Prevents variable name conflicts in same scope\n- **Temporal dead zone**: Error if accessed before declaration\n- **Use cases**: Loop counters, flags, values that need to change\n- **Better debugging**: Clearer error messages and stack traces\n\n### **const - The Constant Declaration**\n- **Block-scoped**: Same scoping rules as let\n- **Cannot reassign**: Immutable binding to value\n- **Must initialize**: Cannot declare without assigning value\n- **Object mutability**: Contents of objects/arrays can still change\n- **Performance**: JavaScript engines can optimize better\n- **Intent clarity**: Makes code more readable and predictable\n- **Default choice**: Use unless reassignment is needed\n\n### **Scoping Differences**\n- **Global scope**: Variables declared outside any function\n- **Function scope**: var variables available throughout function\n- **Block scope**: let/const variables only within block\n- **Module scope**: Variables within ES6 modules\n- **Lexical scoping**: Inner functions access outer variables\n\n### **Hoisting Behavior**\n- **var hoisting**: Declaration moved to top, initialization stays\n- **let/const hoisting**: Declared but not accessible (temporal dead zone)\n- **Function hoisting**: Entire function declaration is hoisted\n- **Best practice**: Declare variables at top of scope\n\n### **Modern Development Standards**\n- **Use const by default**: Prevents accidental reassignment\n- **Use let when needed**: Only when value must change\n- **Never use var**: Too many problematic behaviors\n- **ESLint rules**: Configure linter to enforce these practices\n- **Team consistency**: Establish coding standards across team\n\n### **Migration Strategy**\n- **Replace var with const**: Start with const for all variables\n- **Change to let**: Only when reassignment is actually needed\n- **Test thoroughly**: Ensure scoping changes don't break functionality\n- **Use tools**: Automated refactoring tools can help migration",
      "contentDetails": "## The Evolution of JavaScript Variables\n\n### **var - The Legacy (ES5 and earlier)**\n\n#### **Problems with var**\n- **Function-scoped**: Available throughout entire function\n- **Hoisting**: Declaration moved to top, can use before declaration\n- **Redeclaration allowed**: Can accidentally overwrite variables\n- **No block scope**: Leaks out of if/for blocks\n\n#### **Example Issues**\n```javascript\nfor (var i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 100); // Prints 3, 3, 3\n}\nconsole.log(i); // 3 (leaked outside loop!)\n```\n\n### **let - The Modern Variable (ES6+)**\n\n#### **Improvements**\n- **Block-scoped**: Only available within `{}` blocks\n- **No hoisting**: Must declare before use\n- **No redeclaration**: Prevents accidental overwrites\n- **Temporal Dead Zone**: Error if used before declaration\n\n#### **Best Use Cases**\n- Loop counters\n- Variables that need reassignment\n- Conditional variable declarations\n\n### **const - The Constant (ES6+)**\n\n#### **Characteristics**\n- **Block-scoped**: Like let\n- **Immutable binding**: Cannot reassign the variable\n- **Must initialize**: Cannot declare without value\n- **Contents can change**: Objects/arrays can be modified\n\n#### **Best Use Cases**\n- Configuration values\n- Function references\n- Objects and arrays (when reference shouldn't change)\n- Default choice for most variables\n\n### **Modern Best Practices**\n1. **Use `const` by default**\n2. **Use `let` when reassignment needed**\n3. **Never use `var` in modern JavaScript**\n4. **Prefer descriptive names over short ones**",
      "codeExample": "// var - the old way (avoid in modern JS)\nvar name = 'Alice';\nvar name = 'Bob'; // Redeclaration allowed (dangerous!)\nif (true) {\n  var age = 25;\n}\nconsole.log(age); // 25 (leaked outside block!)\n\n// let - for variables that change\nlet score = 100;\nscore = 150; // ✅ Reassignment allowed\n// let score = 200; // ❌ SyntaxError: Identifier 'score' has already been declared\n\nif (true) {\n  let level = 5;\n}\n// console.log(level); // ❌ ReferenceError: level is not defined\n\n// const - for constants (preferred when possible)\nconst PI = 3.14159;\n// PI = 3.14; // ❌ TypeError: Assignment to constant variable\n\n// const with objects/arrays (contents can change!)\nconst user = { name: 'Alice', age: 25 };\nuser.age = 26; // ✅ Allowed! We're not reassigning the variable\nuser.city = 'NYC'; // ✅ Allowed!\n// user = {}; // ❌ TypeError: Assignment to constant variable\n\nconst colors = ['red', 'green'];\ncolors.push('blue'); // ✅ Allowed! Array contents can change\n// colors = []; // ❌ TypeError: Assignment to constant variable",
      "keyPoints": [
        "Use 'const' by default for immutable bindings",
        "Use 'let' when you need to reassign the variable",
        "Avoid 'var' in modern JavaScript due to scoping issues",
        "'const' objects/arrays can have their contents modified"
      ],
      "quiz": {
        "question": "What happens when you try to reassign a const variable?",
        "options": ["It works normally", "It gives a warning", "It throws a TypeError", "It creates a new variable"],
        "correctAnswer": 2,
        "explanation": "Attempting to reassign a const variable throws a TypeError because const creates an immutable binding to the value."
      },
      "tags": ["variables", "var", "let", "const", "scope"],
      "isCompleted": false,
      "isBookmarked": false
    },
    {
      "id": "data-types-comprehensive",
      "title": "JavaScript's 8 Data Types Explained",
      "day": 2,
      "category": "Data Structures",
      "difficulty": "intermediate",
      "estimatedTime": "5 min",
      "description": "Master all JavaScript data types: 7 primitives + 1 object type.",
      "content": "## JavaScript's 8 Data Types\n\n### **Primitive Types** (7 total)\n1. **Number**: `42`, `3.14`, `Infinity`, `NaN`\n2. **String**: `'text'`, `\"text\"`, `` `template` ``\n3. **Boolean**: `true`, `false`\n4. **Undefined**: Uninitialized variables\n5. **Null**: Intentional absence (`typeof null === 'object'`!)\n6. **Symbol**: Unique identifiers (ES6+)\n7. **BigInt**: Large integers with `n` suffix (ES2020+)\n\n### **Object Type** (1 total, many subtypes)\n- **Plain objects**: `{key: value}`\n- **Arrays**: `[1, 2, 3]` (special objects)\n- **Functions**: `function() {}` (callable objects)\n- **Dates**: `new Date()`\n- **RegExp**: `/pattern/flags`\n- **And more**: Maps, Sets, Promises...\n\n### **Type Checking**\n- **`typeof`**: Returns string representation\n- **`Array.isArray()`**: Specifically for arrays\n- **`instanceof`**: Checks prototype chain\n\n### **Key Insight**\nEverything is either a primitive or an object!",
      "contentDetails": "## JavaScript's Complete Type System\n\n### **Primitive Types** (7 total)\n\n#### **1. Number**\n- **Range**: ±(2^53 - 1) for safe integers\n- **Special values**: `Infinity`, `-Infinity`, `NaN`\n- **Floating point**: All numbers are 64-bit floats\n- **Example**: `42`, `3.14`, `1.23e-4`\n\n#### **2. String**\n- **Immutable**: Cannot change individual characters\n- **Unicode support**: Full UTF-16 encoding\n- **Three syntaxes**: Single quotes, double quotes, template literals\n- **Example**: `'text'`, `\"text\"`, `` `template ${var}` ``\n\n#### **3. Boolean**\n- **Only two values**: `true` and `false`\n- **Truthy/Falsy**: Other types convert to boolean in conditions\n- **Example**: `true`, `false`\n\n#### **4. Undefined**\n- **Default value**: For uninitialized variables\n- **Function returns**: When no explicit return\n- **Missing properties**: When accessing non-existent object properties\n\n#### **5. Null**\n- **Intentional absence**: Explicitly set to \"nothing\"\n- **typeof quirk**: Returns `'object'` (historical bug)\n- **Different from undefined**: Null is intentional, undefined is accidental\n\n#### **6. Symbol** (ES6+)\n- **Always unique**: Even with same description\n- **Object keys**: Can be used as property keys\n- **Well-known symbols**: `Symbol.iterator`, `Symbol.toStringTag`\n- **Example**: `Symbol('id')`, `Symbol.for('global')`\n\n#### **7. BigInt** (ES2020+)\n- **Arbitrary precision**: No size limit for integers\n- **Syntax**: Append `n` or use `BigInt()` constructor\n- **Cannot mix**: With regular numbers in operations\n- **Example**: `123n`, `BigInt('456')`\n\n### **Object Type** (1 total, many subtypes)\n\n#### **Everything else is an object**\n- **Plain objects**: `{key: value}`\n- **Arrays**: `[1, 2, 3]`\n- **Functions**: `function() {}`\n- **Dates**: `new Date()`\n- **RegExp**: `/pattern/flags`\n- **And many more**: Maps, Sets, Promises, etc.\n\n### **Type Checking**\n- **`typeof` operator**: Returns string representation\n- **`instanceof` operator**: Checks object prototype chain\n- **`Array.isArray()`**: Specifically for arrays\n- **`Object.prototype.toString.call()`**: Most reliable method",
      "codeExample": "// 1. Number - integers and floats\nconst integer = 42;\nconst float = 3.14159;\nconst scientific = 1.23e-4; // 0.000123\nconst infinity = Infinity;\nconst notANumber = NaN;\nconsole.log(typeof 42); // 'number'\n\n// 2. String - text data\nconst singleQuote = 'Hello';\nconst doubleQuote = \"World\";\nconst templateLiteral = `Hello ${singleQuote}!`;\nconst multiline = `Line 1\nLine 2`;\nconsole.log(typeof 'text'); // 'string'\n\n// 3. Boolean - true/false\nconst isActive = true;\nconst isComplete = false;\nconsole.log(typeof true); // 'boolean'\n\n// 4. Undefined - declared but not assigned\nlet unassigned;\nconsole.log(unassigned); // undefined\nconsole.log(typeof undefined); // 'undefined'\n\n// 5. Null - intentional absence of value\nconst empty = null;\nconsole.log(typeof null); // 'object' (famous JavaScript quirk!)\n\n// 6. Symbol - unique identifier (ES6)\nconst sym1 = Symbol('id');\nconst sym2 = Symbol('id');\nconsole.log(sym1 === sym2); // false (always unique!)\nconsole.log(typeof sym1); // 'symbol'\n\n// 7. BigInt - large integers (ES2020)\nconst bigNumber = 1234567890123456789012345678901234567890n;\nconst anotherBig = BigInt('9007199254740991');\nconsole.log(typeof bigNumber); // 'bigint'\n\n// 8. Object - everything else!\nconst obj = { name: 'Alice', age: 25 };\nconst arr = [1, 2, 3, 4, 5];\nconst func = function() { return 'Hello'; };\nconst date = new Date();\nconsole.log(typeof obj); // 'object'\nconsole.log(typeof arr); // 'object'\nconsole.log(typeof func); // 'function' (special case)\nconsole.log(typeof date); // 'object'",
      "keyPoints": [
        "7 primitive types: number, string, boolean, undefined, null, symbol, bigint",
        "1 object type: includes objects, arrays, functions, dates",
        "typeof null returns 'object' (famous JavaScript bug)",
        "Symbols are always unique, even with same description"
      ],
      "quiz": {
        "question": "What does typeof null return?",
        "options": ["'null'", "'undefined'", "'object'", "'boolean'"],
        "correctAnswer": 2,
        "explanation": "typeof null returns 'object' due to a famous bug in JavaScript that has been kept for backward compatibility."
      },
      "tags": ["data-types", "primitives", "typeof", "null", "symbol", "bigint"],
      "isCompleted": false,
      "isBookmarked": false
    }
  ]
}
