{
  "cards": [
    {
      "id": "boolean-truthy-falsy",
      "title": "Truthy vs Falsy: JavaScript's Truth System",
      "day": 3,
      "category": "Control Flow",
      "difficulty": "beginner",
      "estimatedTime": "4 min",
      "description": "Master JavaScript's truthy and falsy values - essential for conditional logic.",
      "content": "## Truthy vs Falsy Values\n\n### **Falsy Values** (Only 8!)\n1. `false` - The boolean false\n2. `0` - The number zero\n3. `-0` - Negative zero\n4. `0n` - BigInt zero\n5. `''` - Empty string\n6. `null` - Intentional absence\n7. `undefined` - Uninitialized\n8. `NaN` - Not a Number\n\n### **Truthy Values** (Everything Else!)\n- **Strings**: `'0'`, `'false'`, `' '` (even these!)\n- **Numbers**: `1`, `-1`, `3.14`, `Infinity`\n- **Objects**: `{}`, `[]`, `function() {}`\n- **Arrays**: Even empty ones `[]`\n\n### **Common Gotchas**\n- `'0'` is truthy (string, not number)\n- `[]` is truthy (empty array is still object)\n- `{}` is truthy (empty object is still object)\n\n### **Proper Checks**\n- Array: `array.length` not just `array`\n- Object: `Object.keys(obj).length`",
      "contentDetails": "## JavaScript's Truth System\n\n### **Falsy Values** (Only 8!)\n\n#### **The Complete List**\n1. **`false`** - The boolean false\n2. **`0`** - The number zero\n3. **`-0`** - Negative zero\n4. **`0n`** - BigInt zero\n5. **`''`** - Empty string (also `\"\"` and `` `` ``)\n6. **`null`** - Intentional absence of value\n7. **`undefined`** - Uninitialized or missing value\n8. **`NaN`** - Not a Number\n\n### **Truthy Values** (Everything Else!)\n\n#### **Common Truthy Examples**\n- **Non-empty strings**: `'0'`, `'false'`, `' '` (space)\n- **Numbers**: `1`, `-1`, `3.14`, `Infinity`\n- **Objects**: `{}`, `[]`, `function() {}`\n- **Arrays**: Even empty ones `[]`\n- **Functions**: All functions are truthy\n\n### **Common Gotchas**\n\n#### **String Numbers**\n```javascript\nif ('0') { } // ✅ Truthy! String '0' is not number 0\nif ('false') { } // ✅ Truthy! String 'false' is not boolean false\n```\n\n#### **Empty Collections**\n```javascript\nif ([]) { } // ✅ Truthy! Empty array is an object\nif ({}) { } // ✅ Truthy! Empty object is still an object\n```\n\n#### **Proper Checks**\n```javascript\n// Wrong way\nif (array) { } // Always true for arrays\n\n// Right way\nif (array.length) { } // Checks if array has items\nif (Object.keys(obj).length) { } // Checks if object has properties\n```\n\n### **Practical Applications**\n\n#### **Default Values**\n```javascript\nconst name = userInput || 'Anonymous';\nconst config = options || {};\n```\n\n#### **Conditional Execution**\n```javascript\nuser && user.login(); // Only call if user exists\ndata.length && processData(data); // Only process if data exists\n```\n\n### **Boolean Conversion**\n- **`Boolean(value)`**: Explicit conversion\n- **`!!value`**: Double negation trick\n- **`if (value)`**: Implicit conversion in conditions",
      "codeExample": "// Falsy values (only 8 in JavaScript!)\nconsole.log(Boolean(false));     // false\nconsole.log(Boolean(0));         // false\nconsole.log(Boolean(-0));        // false\nconsole.log(Boolean(0n));        // false (BigInt zero)\nconsole.log(Boolean(''));        // false (empty string)\nconsole.log(Boolean(null));      // false\nconsole.log(Boolean(undefined)); // false\nconsole.log(Boolean(NaN));       // false\n\n// Everything else is truthy!\nconsole.log(Boolean('0'));       // true (string '0')\nconsole.log(Boolean('false'));   // true (string 'false')\nconsole.log(Boolean([]));        // true (empty array)\nconsole.log(Boolean({}));        // true (empty object)\nconsole.log(Boolean(function(){})); // true (function)\n\n// Practical usage in conditions\nconst userInput = '';\nif (userInput) {\n  console.log('User provided input');\n} else {\n  console.log('No input provided'); // This runs\n}\n\n// Common gotcha\nconst items = [];\nif (items) {\n  console.log('Has items'); // This runs! Empty array is truthy\n}\nif (items.length) {\n  console.log('Actually has items'); // This doesn't run\n}",
      "keyPoints": [
        "Only 8 falsy values: false, 0, -0, 0n, '', null, undefined, NaN",
        "Everything else is truthy, including '0', 'false', [], {}",
        "Empty arrays and objects are truthy",
        "Use .length or Object.keys() to check if arrays/objects have content"
      ],
      "quiz": {
        "question": "Which of these values is truthy in JavaScript?",
        "options": ["0", "''", "[]", "null"],
        "correctAnswer": 2,
        "explanation": "An empty array [] is truthy in JavaScript. Only 8 values are falsy: false, 0, -0, 0n, '', null, undefined, and NaN."
      },
      "tags": ["boolean", "truthy", "falsy", "conditionals"],
      "isCompleted": false,
      "isBookmarked": false
    },
    {
      "id": "loops-comprehensive",
      "title": "Loops: The Art of Repetition",
      "day": 6,
      "category": "Control Flow",
      "difficulty": "beginner",
      "estimatedTime": "6 min",
      "description": "Master all types of loops in JavaScript: for, while, do-while, for...in, for...of, and forEach.",
      "content": "## JavaScript Loops Mastery\n\n### **Traditional Loops**\n- **for loop**: `for (let i = 0; i < 5; i++)` - Known iterations\n- **while loop**: `while (condition)` - Unknown iterations\n- **do...while**: Executes at least once\n\n### **Modern Iteration**\n- **for...of**: `for (const item of array)` - Array values\n- **for...in**: `for (const key in object)` - Object keys\n\n### **Array Methods** (Functional)\n- **`forEach()`**: Execute function for each\n- **`map()`**: Transform, return new array\n- **`filter()`**: Select elements that pass test\n- **`reduce()`**: Reduce to single value\n\n### **Loop Control**\n- **`break`**: Exit loop immediately\n- **`continue`**: Skip to next iteration\n\n### **Performance Tips**\n- **Traditional for**: Fastest for large datasets\n- **for...of**: Good balance of speed and readability\n- **Avoid for...in**: For arrays (use for objects)\n\n### **When to Use**\n- **Counting**: `for` loop\n- **Array values**: `for...of`\n- **Object properties**: `for...in`\n- **Condition-based**: `while`",
      "contentDetails": "## Complete Guide to JavaScript Loops\n\n### **Traditional Loops**\n\n#### **1. for Loop**\n- **Best for**: Known number of iterations, array indexing\n- **Performance**: Fastest for large datasets\n- **Syntax**: `for (init; condition; increment)`\n\n```javascript\nfor (let i = 0; i < array.length; i++) {\n  console.log(array[i]);\n}\n```\n\n#### **2. while Loop**\n- **Best for**: Unknown number of iterations\n- **Condition**: Checked before each iteration\n- **Risk**: Infinite loops if condition never becomes false\n\n```javascript\nwhile (condition) {\n  // Code here\n  // Don't forget to update condition!\n}\n```\n\n#### **3. do...while Loop**\n- **Unique feature**: Executes at least once\n- **Condition**: Checked after each iteration\n- **Use case**: User input validation, menu systems\n\n```javascript\ndo {\n  // Code here (runs at least once)\n} while (condition);\n```\n\n### **Modern Iteration**\n\n#### **4. for...in Loop**\n- **Best for**: Object property iteration\n- **Returns**: Property names (keys)\n- **Caution**: Also iterates inherited properties\n\n```javascript\nfor (const key in object) {\n  if (object.hasOwnProperty(key)) {\n    console.log(key, object[key]);\n  }\n}\n```\n\n#### **5. for...of Loop** (ES6+)\n- **Best for**: Array/iterable value iteration\n- **Returns**: Values, not indices\n- **Works with**: Arrays, strings, Maps, Sets, NodeLists\n\n```javascript\nfor (const value of iterable) {\n  console.log(value);\n}\n```\n\n### **Array Methods** (Functional Approach)\n\n#### **6. forEach()**\n- **Best for**: Side effects (logging, DOM manipulation)\n- **Cannot**: Break out early or return values\n- **Syntax**: `array.forEach((item, index, array) => {})`\n\n### **Loop Control**\n- **`break`**: Exit loop immediately\n- **`continue`**: Skip to next iteration\n- **`return`**: Exit function (works in forEach callbacks)\n\n### **Performance Considerations**\n1. **Traditional for**: Fastest for large datasets\n2. **for...of**: Good balance of performance and readability\n3. **forEach**: Slightly slower but more functional\n4. **for...in**: Slowest, avoid for arrays\n\n### **When to Use Which**\n- **Counting/indexing**: `for` loop\n- **Array values**: `for...of` or `forEach`\n- **Object properties**: `for...in`\n- **Condition-based**: `while` or `do...while`\n- **Functional style**: Array methods (`map`, `filter`, `reduce`)",
      "codeExample": "// 1. Traditional for loop - best for counting\nfor (let i = 0; i < 5; i++) {\n  console.log(`Count: ${i}`);\n}\n\n// 2. While loop - condition-based repetition\nlet count = 0;\nwhile (count < 3) {\n  console.log(`While count: ${count}`);\n  count++;\n}\n\n// 3. Do-while loop - executes at least once\nlet num = 10;\ndo {\n  console.log(`Do-while: ${num}`);\n  num++;\n} while (num < 10); // Still runs once even though condition is false\n\n// 4. For...in loop - iterates over object properties\nconst person = { name: 'Alice', age: 30, city: 'NYC' };\nfor (const key in person) {\n  console.log(`${key}: ${person[key]}`);\n}\n\n// 5. For...of loop - iterates over iterable values\nconst fruits = ['apple', 'banana', 'cherry'];\nfor (const fruit of fruits) {\n  console.log(`Fruit: ${fruit}`);\n}\n\n// 6. forEach method - functional approach\nfruits.forEach((fruit, index) => {\n  console.log(`${index}: ${fruit}`);\n});",
      "keyPoints": [
        "for loop: best for counting and performance",
        "for...of: iterates over values of iterables",
        "for...in: iterates over object properties (keys)",
        "Modern methods (map, filter, reduce) are more functional"
      ],
      "quiz": {
        "question": "What's the difference between for...in and for...of?",
        "options": ["No difference", "for...in gets keys, for...of gets values", "for...of is faster", "for...in is deprecated"],
        "correctAnswer": 1,
        "explanation": "for...in iterates over enumerable property names (keys) of an object, while for...of iterates over values of iterable objects like arrays."
      },
      "tags": ["loops", "iteration", "for", "while", "control-flow"],
      "isCompleted": false,
      "isBookmarked": false
    }
  ]
}
