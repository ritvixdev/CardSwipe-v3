{
  "metadata": {
    "fileId": "data-structures-008",
    "topic": "data-structures",
    "subtopic": "scope",
    "partNumber": 1,
    "totalParts": 1,
    "cardCount": 3,
    "difficulty": "beginner",
    "estimatedTime": "9 min",
    "prerequisites": [
      "day-7"
    ],
    "tags": [
      "data-structures",
      "day-8"
    ],
    "version": "1.0.0",
    "createdAt": "2025-08-07T08:51:50.035Z",
    "updatedAt": "2025-08-07T08:51:50.035Z"
  },
  "cards": [
    {
      "id": "data-structures-008-001",
      "title": "Scope",
      "day": 8,
      "category": "data-structures",
      "difficulty": "beginner",
      "estimatedTime": "3 min",
      "description": "<div align=\"center\">\n  <h1> 30 Days Of JavaScript: Objects</h1>\n  <a class=\"header-badge\" target=\"_blank\" href=\"https://www....",
      "content": "<div align=\"center\">\n  <h1> 30 Days Of JavaScript: Objects</h1>\n  <a class=\"header-badge\" target=\"_blank\" href=\"https://www.linkedin.com/in/asabeneh/\">\n  <img src=\"https://img.shields.io/badge/style--5eba00.svg?label=LinkedIn&logo=linkedin&style=social\">\n  </a>\n  <a class=\"header-badge\" target=\"_blank\" href=\"https://twitter.com/Asabeneh\">\n  <img alt=\"Twitter Follow\" src=\"https://img.shields.io/twitter/follow/asabeneh?style=social\">\n  </a>\n\n  <sub>Author:\n  <a href=\"https://www.linkedin.com/in/asabeneh/\" target=\"_blank\">Asabeneh Yetayeh</a><br>\n  <small> January, 2020</small>\n  </sub>\n</div>\n\n[<< Day 7](../07_Day_Functions/07_day_functions.md) | [Day 9 >>](../09_Day_Higher_order_functions/09_day_higher_order_functions.md)\n\n![Thirty Days Of JavaScript](../images/banners/day_1_8.png)\n\n- [ðŸ“” Day 8](-day-8)\n\t- [Scope](scope)\n\t\t- [Window Global Object](window-global-object)\n\t\t- [Global scope](global-scope)\n\t\t- [Local scope](local-scope)\n\t- [ðŸ“” Object](-object)\n\t\t- [Creating an empty object](creating-an-empty-object)\n\t\t- [Creating an objecting with values](creating-an-objecting-with-values)\n\t\t- [Getting values from an object](getting-values-from-an-object)\n\t\t- [Creating object methods](creating-object-methods)\n\t\t- [Setting new key for an object](setting-new-key-for-an-object)\n\t\t- [Object Methods](object-methods)\n\t\t\t- [Getting object keys using Object.keys()](getting-object-keys-using-objectkeys)\n\t\t\t- [Getting object values using Object.values()](getting-object-values-using-objectvalues)\n\t\t\t- [Getting object keys and values using Object.entries()](getting-object-keys-and-values-using-objectentries)\n\t\t\t- [Checking properties using hasOwnProperty()](checking-properties-using-hasownproperty)\n\t- [ðŸ’» Exercises](-exercises)\n\t\t- [Exercises: Level 1](exercises-level-1)\n\t\t- [Exercises: Level 2](exercises-level-2)\n\t\t- [Exercises: Level 3](exercises-level-3)\n\nðŸ“” Day 8",
      "codeExample": "//scope.js\na = 'JavaScript' // declaring a variable without let or const make it available in window object and this found anywhere\nb = 10 // this is a global scope variable and found in the window object\nfunction letsLearnScope() {\n  console.log(a, b)\n  if (true) {\n    console.log(a, b)\n  }\n}\nconsole.log(a, b) // accessible",
      "keyPoints": [
        "[ðŸ“” Day 8](#-day-8)",
        "[Scope](#scope)",
        "[Window Global Object](#window-global-object)",
        "[Global scope](#global-scope)"
      ],
      "quiz": {
        "question": "What is the main concept covered in this lesson?",
        "options": [
          "Option A",
          "Option B",
          "Option C",
          "Option D"
        ],
        "correctAnswer": 0,
        "explanation": "This covers the main concept discussed in the lesson."
      },
      "tags": [
        "data-structures",
        "day-8"
      ]
    },
    {
      "id": "data-structures-008-002",
      "title": "Scope - Part 2",
      "day": 8,
      "category": "data-structures",
      "difficulty": "beginner",
      "estimatedTime": "2 min",
      "description": "Scope\n\nVariable is the fundamental part in programming....",
      "content": "Scope\n\nVariable is the fundamental part in programming. We declare variable to store different data types. To declare a variable we use the key word _var_, _let_ and _const_. A variable can be declared at different scope. In this section, we will see the scope variables, scope of variables when we use var or let.\nVariables scopes can be:\n\n- Global\n- Local\n\nVariable can be declared globally or locally  scope. We will see both global and local scope.\nAnything declared without let, var or const is scoped at global level.\n\nLet us imagine that we have a scope.js file.\n\nWindow Global Object\n\nWithout using console.log() open your browser and check, you will see the value of a and b if you write a or b on the browser. That means a and b are already available in the window.\n\n`js\n//scope.js\na = 'JavaScript' // declaring a variable without let or const make it available in window object and this found anywhere\nb = 10 // this is a global scope variable and found in the window object\nfunction letsLearnScope() {\n  console.log(a, b)\n  if (true) {\n    console.log(a, b)\n  }\n}\nconsole.log(a, b) // accessible\n`\n\nGlobal scope\n\nA globally declared variable can be accessed every where in the same file. But the term global is relative. It can be global to the file or it can be global relative to some block of codes.\n\n`js\n//scope.js\nlet a = 'JavaScript' // is a global scope it will be found anywhere in this file\nlet b = 10 // is a global scope it will be found anywhere in this file\nfunction letsLearnScope() {\n  console.log(a, b) // JavaScript 10, accessible\n  if (true) {\n    let a = 'Python'\n    let b = 100\n    console.log(a, b) // Python 100\n  }\n  console.log(a, b)\n}\nletsLearnScope()\nconsole.log(a, b) // JavaScript 10, accessible\n`\n\nLocal scope\n\nA variable declared as local can be accessed only in certain block code.\n\n- Block Scope\n- Function Scope\n\n`js\n//scope.js\nlet a = 'JavaScript' // is a global scope it will be found anywhere in this file\nlet b = 10 // is a global scope it will be found anywhere in this file\n// Function scope\nfunction letsLearnScope() {\n  console.log(a, b) // JavaScript 10, accessible\n  let value = false\n// block scope\n  if (true) {\n    // we can access from the function and outside the function but \n    // variables declared inside the if will not be accessed outside the if block\n    let a = 'Python'\n    let b = 20\n    let c = 30\n    let d = 40\n    value = !value\n    console.log(a, b, c, value) // Python 20 30 true\n  }\n  // we can not access c because c's scope is only the if block\n  console.log(a, b, value) // JavaScript 10 true\n}\nletsLearnScope()\nconsole.log(a, b) // JavaScript 10, accessible\n`\n\nNow, you have an understanding of scope. A variable declared with var only scoped to function but variable declared with let or const is block scope(function block, if block, loop block, etc). Block in JavaScript is a code in between two curly brackets ({}).\n\n`js\n//scope.js\nfunction letsLearnScope() {\n  var gravity = 9.81\n  console.log(gravity)\n\n}\n// console.log(gravity), Uncaught ReferenceError: gravity is not defined\n\nif (true){\n  var gravity = 9.81\n  console.log(gravity) // 9.81\n}\nconsole.log(gravity)  // 9.81\n\nfor(var i = 0; i < 3; i++){\n  console.log(i) // 0, 1, 2\n}\nconsole.log(i) // 3\n\n`\n\nIn ES6 and above there is let and const, so you will not suffer from the sneakiness of var. When we use let our variable is block scoped and it will not infect other parts of our code.\n\n`js\n//scope.js\nfunction letsLearnScope() {\n  // you can use let or const, but gravity is constant I prefer to use const\n  const gravity = 9.81\n  console.log(gravity)\n\n}\n// console.log(gravity), Uncaught ReferenceError: gravity is not defined\n\nif (true){\n  const  gravity = 9.81\n  console.log(gravity) // 9.81\n}\n// console.log(gravity), Uncaught ReferenceError: gravity is not defined\n\nfor(let i = 0; i < 3; i++){\n  console.log(i) // 0, 1, 2\n}\n// console.log(i), Uncaught ReferenceError: i is not defined\n\n`\n\nThe scope let and const are the same. The difference is only reassigning. We can not change or reassign the value of the const variable. I would strongly suggest you to use let and const, by using let and const you will write clean code and avoid hard to debug mistakes. As a rule of thumb, you can use let for any value which change, const for any constant value, and for an array, object, arrow function and function expression.",
      "codeExample": "//scope.js\na = 'JavaScript' // declaring a variable without let or const make it available in window object and this found anywhere\nb = 10 // this is a global scope variable and found in the window object\nfunction letsLearnScope() {\n  console.log(a, b)\n  if (true) {\n    console.log(a, b)\n  }\n}\nconsole.log(a, b) // accessible",
      "keyPoints": [
        "Global",
        "Local",
        "Block Scope",
        "Function Scope"
      ],
      "quiz": {
        "question": "What is the main concept covered in this lesson?",
        "options": [
          "Option A",
          "Option B",
          "Option C",
          "Option D"
        ],
        "correctAnswer": 0,
        "explanation": "This covers the main concept discussed in the lesson."
      },
      "tags": [
        "data-structures",
        "day-8"
      ]
    },
    {
      "id": "data-structures-008-003",
      "title": "Scope - Part 3",
      "day": 8,
      "category": "data-structures",
      "difficulty": "beginner",
      "estimatedTime": "2 min",
      "description": "ðŸ“” Object\n\nEverything can be an object and objects do have properties and properties have values, so an object is a key value pair....",
      "content": "ðŸ“” Object\n\nEverything can be an object and objects do have properties and properties have values, so an object is a key value pair. The order of the key is not reserved, or there is no order.\nTo create an object literal, we use two curly brackets.\n\nCreating an empty object\n\nAn empty object\n\n`js\nconst person = {}\n`\n\nCreating an objecting with values\n\nNow, the person object has firstName, lastName, age, location, skills and isMarried properties. The value of properties or keys could be a string, number, boolean, an object, null, undefined or a function.\n\nLet us see some examples of object. Each key has a value in the object.\n\n`js\nconst rectangle = {\n  length: 20,\n  width: 20\n}\nconsole.log(rectangle) // {length: 20, width: 20}\n\nconst person = {\n  firstName: 'Asabeneh',\n  lastName: 'Yetayeh',\n  age: 250,\n  country: 'Finland',\n  city: 'Helsinki',\n  skills: [\n    'HTML',\n    'CSS',\n    'JavaScript',\n    'React',\n    'Node',\n    'MongoDB',\n    'Python',\n    'D3.js'\n  ],\n  isMarried: true\n}\nconsole.log(person)\n`\n\nGetting values from an object\n\nWe can access values of object using two methods:\n\n- using . followed by key name if the key-name is a one word\n- using square bracket and a quote\n\n`js\nconst person = {\n  firstName: 'Asabeneh',\n  lastName: 'Yetayeh',\n  age: 250,\n  country: 'Finland',\n  city: 'Helsinki',\n  skills: [\n    'HTML',\n    'CSS',\n    'JavaScript',\n    'React',\n    'Node',\n    'MongoDB',\n    'Python',\n    'D3.js'\n  ],\n  getFullName: function() {\n    return ${this.firstName}${this.lastName}\n  },\n  'phone number': '+3584545454545'\n}\n\n// accessing values using .\nconsole.log(person.firstName)\nconsole.log(person.lastName)\nconsole.log(person.age)\nconsole.log(person.location) // undefined\n\n// value can be accessed using square bracket and key name\nconsole.log(person['firstName'])\nconsole.log(person['lastName'])\nconsole.log(person['age'])\nconsole.log(person['age'])\nconsole.log(person['location']) // undefined\n\n// for instance to access the phone number we only use the square bracket method\nconsole.log(person['phone number'])\n`\n\nCreating object methods\n\nNow, the person object has getFullName properties. The getFullName is function inside the person object and we call it an object method. The _this_ key word refers to the object itself. We can use the word _this_ to access the values of different properties of the object. We can not use an arrow function as object method because the word this refers to the window inside an arrow function instead of the object itself. Example of object:\n\n`js\nconst person = {\n  firstName: 'Asabeneh',\n  lastName: 'Yetayeh',\n  age: 250,\n  country: 'Finland',\n  city: 'Helsinki',\n  skills: [\n    'HTML',\n    'CSS',\n    'JavaScript',\n    'React',\n    'Node',\n    'MongoDB',\n    'Python',\n    'D3.js'\n  ],\n  getFullName: function() {\n    return ${this.firstName} ${this.lastName}\n  }\n}\n\nconsole.log(person.getFullName())\n// Asabeneh Yetayeh\n`\n\nSetting new key for an object\n\nAn object is a mutable data structure and we can modify the content of an object after it gets created.\n\nSetting a new keys in an object\n\n`js\nconst person = {\n  firstName: 'Asabeneh',\n  lastName: 'Yetayeh',\n  age: 250,\n  country: 'Finland',\n  city: 'Helsinki',\n  skills: [\n    'HTML',\n    'CSS',\n    'JavaScript',\n    'React',\n    'Node',\n    'MongoDB',\n    'Python',\n    'D3.js'\n  ],\n  getFullName: function() {\n    return ${this.firstName} ${this.lastName}\n  }\n}\nperson.nationality = 'Ethiopian'\nperson.country = 'Finland'\nperson.title = 'teacher'\nperson.skills.push('Meteor')\nperson.skills.push('SasS')\nperson.isMarried = true\n\nperson.getPersonInfo = function() {\n  let skillsWithoutLastSkill = this.skills\n    .splice(0, this.skills.length - 1)\n    .join(', ')\n  let lastSkill = this.skills.splice(this.skills.length - 1)[0]\n\n  let skills = ${skillsWithoutLastSkill}, and ${lastSkill}\n  let fullName = this.getFullName()\n  let statement = ${fullName} is a ${this.title}.\\nHe lives in ${this.country}.\\nHe teaches ${skills}.\n  return statement\n}\nconsole.log(person)\nconsole.log(person.getPersonInfo())\n`\n\n`sh\nAsabeneh Yetayeh is a teacher.\nHe lives in Finland.\nHe teaches HTML, CSS, JavaScript, React, Node, MongoDB, Python, D3.js, Meteor, and SasS.\n`\n\nObject Methods\n\nThere are different methods to manipulate an object. Let us see some of the available methods.\n\n_Object.assign_: To copy an object without modifying the original object\n\n`js\nconst person = {\n  firstName: 'Asabeneh',\n  age: 250,\n  country: 'Finland',\n  city:'Helsinki',\n  skills: ['HTML', 'CSS', 'JS'],\n  title: 'teacher',\n  address: {\n    street: 'Heitamienkatu 16',\n    pobox: 2002,\n    city: 'Helsinki'\n  },\n  getPersonInfo: function() {\n    return I am ${this.firstName} and I live in ${this.city}, ${this.country}. I am ${this.age}.\n  }\n}\n\n//Object methods: Object.assign, Object.keys, Object.values, Object.entries\n//hasOwnProperty\n\nconst copyPerson = Object.assign({}, person)\nconsole.log(copyPerson)\n`\n\nGetting object keys using Object.keys()\n\n_Object.keys_: To get the keys or properties of an object as an array\n\n`js\nconst keys = Object.keys(copyPerson)\nconsole.log(keys) //['firstName', 'age', 'country','city', 'skills','title', 'address', 'getPersonInfo']\nconst address = Object.keys(copyPerson.address)\nconsole.log(address) //['street', 'pobox', 'city']\n`\n\nGetting object values using Object.values()\n\n_Object.values_:To get values of an object as an array\n\n`js\nconst values = Object.values(copyPerson)\nconsole.log(values)\n`\n\nGetting object keys and values using Object.entries()\n\n_Object.entries_:To get the keys and values in an array\n\n`js\nconst entries = Object.entries(copyPerson)\nconsole.log(entries)\n`\n\nChecking properties using hasOwnProperty()\n\n_hasOwnProperty_: To check if a specific key or property exist in an object\n\n`js\nconsole.log(copyPerson.hasOwnProperty('name'))\nconsole.log(copyPerson.hasOwnProperty('score'))\n`\n\nðŸŒ• You are astonishing. Now, you are super charged with the power of objects. You have just completed day 8 challenges and you are 8 steps a head in to your way to greatness. Now do some exercises for your brain and for your muscle.",
      "codeExample": "const person = {}",
      "keyPoints": [
        "using . followed by key name if the key-name is a one word",
        "using square bracket and a quote"
      ],
      "quiz": {
        "question": "What is the main concept covered in this lesson?",
        "options": [
          "Option A",
          "Option B",
          "Option C",
          "Option D"
        ],
        "correctAnswer": 0,
        "explanation": "This covers the main concept discussed in the lesson."
      },
      "tags": [
        "data-structures",
        "day-8"
      ]
    }
  ]
}