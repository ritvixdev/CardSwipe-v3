{
  "metadata": {
    "fileId": "fundamentals-002",
    "topic": "fundamentals",
    "subtopic": "data-types",
    "partNumber": 1,
    "totalParts": 1,
    "cardCount": 3,
    "difficulty": "beginner",
    "estimatedTime": "9 min",
    "prerequisites": [
      "day-1"
    ],
    "tags": [
      "fundamentals",
      "day-2"
    ],
    "version": "1.0.0",
    "createdAt": "2025-08-07T08:51:49.982Z",
    "updatedAt": "2025-08-07T08:51:49.983Z"
  },
  "cards": [
    {
      "id": "fundamentals-002-001",
      "title": "Data Types",
      "day": 2,
      "category": "fundamentals",
      "difficulty": "beginner",
      "estimatedTime": "3 min",
      "description": "<div align=\"center\">\n  <h1> 30 Days Of JavaScript: Data Types</h1>\n  <a class=\"header-badge\" target=\"_blank\" href=\"https://www....",
      "content": "<div align=\"center\">\n  <h1> 30 Days Of JavaScript: Data Types</h1>\n  <a class=\"header-badge\" target=\"_blank\" href=\"https://www.linkedin.com/in/asabeneh/\">\n  <img src=\"https://img.shields.io/badge/style--5eba00.svg?label=LinkedIn&logo=linkedin&style=social\">\n  </a>\n  <a class=\"header-badge\" target=\"_blank\" href=\"https://twitter.com/Asabeneh\">\n  <img alt=\"Twitter Follow\" src=\"https://img.shields.io/twitter/follow/asabeneh?style=social\">\n  </a>\n\n  <sub>Author:\n  <a href=\"https://www.linkedin.com/in/asabeneh/\" target=\"_blank\">Asabeneh Yetayeh</a><br>\n  <small> January, 2020</small>\n  </sub>\n</div>\n</div>\n\n[<< Day 1](../readMe.md) | [Day 3 >>](../03_Day_Booleans_operators_date/03_booleans_operators_date.md)\n\n![Thirty Days Of JavaScript](../images/banners/day_1_2.png)\n\n- [ðŸ“” Day 2](-day-2)\n\t- [Data Types](data-types)\n\t\t- [Primitive Data Types](primitive-data-types)\n\t\t- [Non-Primitive Data Types](non-primitive-data-types)\n\t- [Numbers](numbers)\n\t\t- [Declaring Number Data Types](declaring-number-data-types)\n\t\t- [Math Object](math-object)\n\t\t\t- [Random Number Generator](random-number-generator)\n\t- [Strings](strings)\n\t\t- [String Concatenation](string-concatenation)\n\t\t\t- [Concatenating Using Addition Operator](concatenating-using-addition-operator)\n\t\t\t- [Long Literal Strings](long-literal-strings)\n\t\t\t- [Escape Sequences in Strings](escape-sequences-in-strings)\n\t\t\t- [Template Literals (Template Strings)](template-literals-template-strings)\n\t\t- [String Methods](string-methods)\n\t- [Checking Data Types and Casting](checking-data-types-and-casting)\n\t\t- [Checking Data Types](checking-data-types)\n\t\t- [Changing Data Type (Casting)](changing-data-type-casting)\n\t\t\t- [String to Int](string-to-int)\n\t\t\t- [String to Float](string-to-float)\n\t\t\t- [Float to Int](float-to-int)\n\t- [ðŸ’» Day 2: Exercises](-day-2-exercises)\n\t\t- [Exercise: Level 1](exercise-level-1)\n\t\t- [Exercise: Level 2](exercise-level-2)\n\t\t- [Exercises: Level 3](exercises-level-3)\n\nðŸ“” Day 2",
      "codeExample": "let word = 'JavaScript'",
      "keyPoints": [
        "[ðŸ“” Day 2](#-day-2)",
        "[Data Types](#data-types)",
        "[Primitive Data Types](#primitive-data-types)",
        "[Non-Primitive Data Types](#non-primitive-data-types)"
      ],
      "quiz": {
        "question": "What is the main concept covered in this lesson?",
        "options": [
          "Option A",
          "Option B",
          "Option C",
          "Option D"
        ],
        "correctAnswer": 0,
        "explanation": "This covers the main concept discussed in the lesson."
      },
      "tags": [
        "fundamentals",
        "day-2"
      ]
    },
    {
      "id": "fundamentals-002-002",
      "title": "Data Types - Part 2",
      "day": 2,
      "category": "fundamentals",
      "difficulty": "beginner",
      "estimatedTime": "2 min",
      "description": "Data Types\n\nIn the previous section, we mentioned a little bit about data types....",
      "content": "Data Types\n\nIn the previous section, we mentioned a little bit about data types. Data or values have data types. Data types describe the characteristics of data. Data types can be divided into two:\n\n1. Primitive data types\n2. Non-primitive data types(Object References)\n\nPrimitive Data Types\n\nPrimitive data types in JavaScript include:\n\n 1. Numbers - Integers, floats\n 2. Strings - Any data under single quote, double quote or backtick quote\n 3. Booleans - true or false value\n 4. Null - empty value or no value\n 5. Undefined - a declared variable without a value\n 6. Symbol - A unique value that can be generated by Symbol constructor\n\nNon-primitive data types in JavaScript includes:\n\n1. Objects\n2. Arrays\n\nNow, let us see what exactly primitive and non-primitive data types mean.\nPrimitive data types are immutable(non-modifiable) data types. Once a primitive data type is created we cannot modify it.\n\nExample:\n\n`js\nlet word = 'JavaScript'\n`\n\nIf we try to modify the string stored in variable word, JavaScript should raise an error. Any data type under a single quote, double quote, or backtick quote is a string data type.\n\n`js\nword[0] = 'Y'\n`\n\nThis expression does not change the string stored in the variable word. So, we can say that strings are not modifiable or in other words immutable.\nPrimitive data types are compared by its values. Let us compare different data values. See the example below:\n\n`js\nlet numOne = 3\nlet numTwo = 3\n\nconsole.log(numOne == numTwo)      // true\n\nlet js = 'JavaScript'\nlet py = 'Python'\n\nconsole.log(js == py)             //false \n\nlet lightOn = true\nlet lightOff = false\n\nconsole.log(lightOn == lightOff) // false\n`\n\nNon-Primitive Data Types\n\nNon-primitive data types are modifiable or mutable. We can modify the value of non-primitive data types after it gets created.\nLet us see by creating an array. An array is a list of data values in a square bracket. Arrays can contain the same or different data types. Array values are referenced by their index. In JavaScript array index starts at zero. I.e., the first element of an array is found at index zero, the second element at index one, and the third element at index two, etc.\n\n`js\nlet nums = [1, 2, 3]\nnums[0] = 10\n\nconsole.log(nums)  // [10, 2, 3]\n`\n\nAs you can see, an array, which is a non-primitive data type is mutable. Non-primitive data types cannot be compared by value. Even if two non-primitive data types have the same properties and values, they are not strictly equal.\n\n`js\nlet nums = [1, 2, 3]\nlet numbers = [1, 2, 3]\n\nconsole.log(nums == numbers)  // false\n\nlet userOne = {\nname:'Asabeneh',\nrole:'teaching',\ncountry:'Finland'\n}\n\nlet userTwo = {\nname:'Asabeneh',\nrole:'teaching',\ncountry:'Finland'\n}\n\nconsole.log(userOne == userTwo) // false\n`\n\nRule of thumb, we do not compare non-primitive data types. Do not compare arrays, functions, or objects.\nNon-primitive values are referred to as reference types, because they are being compared by reference instead of value. Two objects are only strictly equal if they refer to the same underlying object.\n\n`js\nlet nums = [1, 2, 3]\nlet numbers = nums\n\nconsole.log(nums == numbers)  // true\n\nlet userOne = {\nname:'Asabeneh',\nrole:'teaching',\ncountry:'Finland'\n}\n\nlet userTwo = userOne\n\nconsole.log(userOne == userTwo)  // true\n`\n\nIf you have a hard time understanding the difference between primitive data types and non-primitive data types, you are not the only one. Calm down and just go to the next section and try to come back after some time. Now let us start the data types by number type.",
      "codeExample": "let word = 'JavaScript'",
      "keyPoints": [
        "Key concept from this lesson",
        "Important implementation detail",
        "Best practice to remember",
        "Common use case"
      ],
      "quiz": {
        "question": "What is the main concept covered in this lesson?",
        "options": [
          "Option A",
          "Option B",
          "Option C",
          "Option D"
        ],
        "correctAnswer": 0,
        "explanation": "This covers the main concept discussed in the lesson."
      },
      "tags": [
        "fundamentals",
        "day-2"
      ]
    },
    {
      "id": "fundamentals-002-003",
      "title": "Data Types - Part 3",
      "day": 2,
      "category": "fundamentals",
      "difficulty": "beginner",
      "estimatedTime": "2 min",
      "description": "Numbers\n\nNumbers are integers and decimal values which can do all the arithmetic operations....",
      "content": "Numbers\n\nNumbers are integers and decimal values which can do all the arithmetic operations.\nLet's see some examples of Numbers.\n\nDeclaring Number Data Types\n\n`js\nlet age = 35\nconst gravity = 9.81  // we use const for non-changing values, gravitational constant in  m/s2\nlet mass = 72         // mass in Kilogram\nconst PI = 3.14       // pi a geometrical constant\n\n// More Examples\nconst boilingPoint = 100 // temperature in oC, boiling point of water which is a constant\nconst bodyTemp = 37      // oC average human body temperature, which is a constant\n\nconsole.log(age, gravity, mass, PI, boilingPoint, bodyTemp)\n`\n\nMath Object\n\nIn JavaScript the Math Object provides a lots of methods to work with numbers.\n\n`js\nconst PI = Math.PI\n\nconsole.log(PI)                            // 3.141592653589793\n\n// Rounding to the closest number\n// if above .5 up if less 0.5 down rounding\n\nconsole.log(Math.round(PI))                // 3 to round values to the nearest number\n\nconsole.log(Math.round(9.81))              // 10\n\nconsole.log(Math.floor(PI))                // 3 rounding down\n\nconsole.log(Math.ceil(PI))                 // 4 rounding up\n\nconsole.log(Math.min(-5, 3, 20, 4, 5, 10)) // -5, returns the minimum value\n\nconsole.log(Math.max(-5, 3, 20, 4, 5, 10)) // 20, returns the maximum value\n\nconst randNum = Math.random() // creates random number between 0 to 0.999999\nconsole.log(randNum)\n\n// Let us  create random number between 0 to 10\n\nconst num = Math.floor(Math.random () * 11) // creates random number between 0 and 10\nconsole.log(num)\n\n//Absolute value\nconsole.log(Math.abs(-10))      // 10\n\n//Square root\nconsole.log(Math.sqrt(100))     // 10\n\nconsole.log(Math.sqrt(2))       // 1.4142135623730951\n\n// Power\nconsole.log(Math.pow(3, 2))     // 9\n\nconsole.log(Math.E)             // 2.718\n\n// Logarithm\n// Returns the natural logarithm with base E of x, Math.log(x)\nconsole.log(Math.log(2))        // 0.6931471805599453\nconsole.log(Math.log(10))       // 2.302585092994046\n\n// Returns the natural logarithm of 2 and 10 respectively\nconsole.log(Math.LN2)           // 0.6931471805599453\nconsole.log(Math.LN10)          // 2.302585092994046\n\n// Trigonometry\nMath.sin(0)\nMath.sin(60)\n\nMath.cos(0)\nMath.cos(60)\n`\n\nRandom Number Generator\n\nThe JavaScript Math Object has a random() method number generator which generates number from 0 to 0.999999999...\n\n`js\nlet randomNum = Math.random() // generates 0 to 0.999...\n`\n\nNow, let us see how we can use random() method to generate a random number between 0 and 10:\n\n`js\nlet randomNum = Math.random()         // generates 0 to 0.999\nlet numBtnZeroAndTen = randomNum * 11\n\nconsole.log(numBtnZeroAndTen)         // this gives: min 0 and max 10.99\n\nlet randomNumRoundToFloor = Math.floor(numBtnZeroAndTen)\nconsole.log(randomNumRoundToFloor)    // this gives between 0 and 10\n`",
      "codeExample": "let age = 35\nconst gravity = 9.81  // we use const for non-changing values, gravitational constant in  m/s2\nlet mass = 72         // mass in Kilogram\nconst PI = 3.14       // pi a geometrical constant\n\n// More Examples\nconst boilingPoint = 100 // temperature in oC, boiling point of water which is a constant\nconst bodyTemp = 37      // oC average human body temperature, which is a constant\n\nconsole.log(age, gravity, mass, PI, boilingPoint, bodyTemp)",
      "keyPoints": [
        "Key concept from this lesson",
        "Important implementation detail",
        "Best practice to remember",
        "Common use case"
      ],
      "quiz": {
        "question": "What is the main concept covered in this lesson?",
        "options": [
          "Option A",
          "Option B",
          "Option C",
          "Option D"
        ],
        "correctAnswer": 0,
        "explanation": "This covers the main concept discussed in the lesson."
      },
      "tags": [
        "fundamentals",
        "day-2"
      ]
    }
  ]
}