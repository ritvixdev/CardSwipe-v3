{
  "metadata": {
    "fileId": "fundamentals-005",
    "topic": "fundamentals",
    "subtopic": "arrays",
    "partNumber": 1,
    "totalParts": 1,
    "cardCount": 3,
    "difficulty": "beginner",
    "estimatedTime": "9 min",
    "prerequisites": [
      "day-4"
    ],
    "tags": [
      "fundamentals",
      "day-5"
    ],
    "version": "1.0.0",
    "createdAt": "2025-08-07T08:51:50.007Z",
    "updatedAt": "2025-08-07T08:51:50.007Z"
  },
  "cards": [
    {
      "id": "fundamentals-005-001",
      "title": "Arrays",
      "day": 5,
      "category": "fundamentals",
      "difficulty": "beginner",
      "estimatedTime": "3 min",
      "description": "<div align=\"center\">\n  <h1> 30 Days Of JavaScript: Arrays</h1>\n  <a class=\"header-badge\" target=\"_blank\" href=\"https://www....",
      "content": "<div align=\"center\">\n  <h1> 30 Days Of JavaScript: Arrays</h1>\n  <a class=\"header-badge\" target=\"_blank\" href=\"https://www.linkedin.com/in/asabeneh/\">\n  <img src=\"https://img.shields.io/badge/style--5eba00.svg?label=LinkedIn&logo=linkedin&style=social\">\n  </a>\n  <a class=\"header-badge\" target=\"_blank\" href=\"https://twitter.com/Asabeneh\">\n  <img alt=\"Twitter Follow\" src=\"https://img.shields.io/twitter/follow/asabeneh?style=social\">\n  </a>\n\n  <sub>Author:\n  <a href=\"https://www.linkedin.com/in/asabeneh/\" target=\"_blank\">Asabeneh Yetayeh</a><br>\n  <small> January, 2020</small>\n  </sub>\n</div>\n\n[<< Day 4](../04_Day_Conditionals/04_day_conditionals.md) | [Day 6 >>](../06_Day_Loops/06_day_loops.md)\n\n![Day 5](../images/banners/day_1_5.png)\n\n- [ðŸ“” Day 5](-day-5)\n\t- [Arrays](arrays)\n\t\t- [How to create an empty array](how-to-create-an-empty-array)\n\t\t- [How to create an array with values](how-to-create-an-array-with-values)\n\t\t- [Creating an array using split](creating-an-array-using-split)\n\t\t- [Accessing array items using index](accessing-array-items-using-index)\n\t\t- [Modifying array element](modifying-array-element)\n\t\t- [Methods to manipulate array](methods-to-manipulate-array)\n\t\t\t- [Array Constructor](array-constructor)\n\t\t\t- [Creating static values with fill](creating-static-values-with-fill)\n\t\t\t- [Concatenating array using concat](concatenating-array-using-concat)\n\t\t\t- [Getting array length](getting-array-length)\n\t\t\t- [Getting index an element in arr array](getting-index-an-element-in-arr-array)\n\t\t\t- [Getting last index of an element in array](getting-last-index-of-an-element-in-array)\n\t\t\t- [Checking array](checking-array)\n\t\t\t- [Converting array to string](converting-array-to-string)\n\t\t\t- [Joining array elements](joining-array-elements)\n\t\t\t- [Slice array elements](slice-array-elements)\n\t\t\t- [Splice method in array](splice-method-in-array)\n\t\t\t- [Adding item to an array using push](adding-item-to-an-array-using-push)\n\t\t\t- [Removing the end element using pop](removing-the-end-element-using-pop)\n\t\t\t- [Removing an element from the beginning](removing-an-element-from-the-beginning)\n\t\t\t- [Add an element from the beginning](add-an-element-from-the-beginning)\n\t\t\t- [Reversing array order](reversing-array-order)\n\t\t\t- [Sorting elements in array](sorting-elements-in-array)\n\t\t- [Array of arrays](array-of-arrays)\n\t- [ðŸ’» Exercise](-exercise)\n\t\t- [Exercise: Level 1](exercise-level-1)\n\t\t- [Exercise: Level 2](exercise-level-2)\n\t\t- [Exercise: Level 3](exercise-level-3)\n\nðŸ“” Day 5",
      "codeExample": "// syntax\nconst arr = Array()\n// or\n// let arr = new Array()\nconsole.log(arr) // []",
      "keyPoints": [
        "[ðŸ“” Day 5](#-day-5)",
        "[Arrays](#arrays)",
        "[How to create an empty array](#how-to-create-an-empty-array)",
        "[How to create an array with values](#how-to-create-an-array-with-values)"
      ],
      "quiz": {
        "question": "What is the main concept covered in this lesson?",
        "options": [
          "Option A",
          "Option B",
          "Option C",
          "Option D"
        ],
        "correctAnswer": 0,
        "explanation": "This covers the main concept discussed in the lesson."
      },
      "tags": [
        "fundamentals",
        "day-5"
      ]
    },
    {
      "id": "fundamentals-005-002",
      "title": "Arrays - Part 2",
      "day": 5,
      "category": "fundamentals",
      "difficulty": "beginner",
      "estimatedTime": "2 min",
      "description": "Arrays\n\nIn contrast to variables, an array can store _multiple values_....",
      "content": "Arrays\n\nIn contrast to variables, an array can store _multiple values_. Each value in an array has an _index_, and each index has _a reference in a memory address_. Each value can be accessed by using their _indexes_. The index of an array starts from _zero_, and the  index of the last element is less by one from the length of the array.\n\nAn array is a collection of different data types which are ordered and changeable(modifiable). An array allows storing duplicate elements and different data types. An array can be empty, or it may have different data type values.\n\nHow to create an empty array\n\nIn JavaScript, we can create an array in different ways. Let us see different ways to create an array.\nIt is very common to use _const_ instead of _let_ to declare an array variable. If you ar using const it means you do not use that variable name again.\n\n- Using Array constructor\n\n`js\n// syntax\nconst arr = Array()\n// or\n// let arr = new Array()\nconsole.log(arr) // []\n`\n\n- Using square brackets([])\n\n`js\n// syntax\n// This the most recommended way to create an empty list\nconst arr = []\nconsole.log(arr)\n`\n\nHow to create an array with values\n\nArray with initial values. We use _length_ property to find the length of an array.\n\n`js\nconst numbers = [0, 3.14, 9.81, 37, 98.6, 100] // array of numbers\nconst fruits = ['banana', 'orange', 'mango', 'lemon'] // array of strings, fruits\nconst vegetables = ['Tomato', 'Potato', 'Cabbage', 'Onion', 'Carrot'] // array of strings, vegetables\nconst animalProducts = ['milk', 'meat', 'butter', 'yoghurt'] // array of strings, products\nconst webTechs = ['HTML', 'CSS', 'JS', 'React', 'Redux', 'Node', 'MongDB'] // array of web technologies\nconst countries = ['Finland', 'Denmark', 'Sweden', 'Norway', 'Iceland'] // array of strings, countries\n\n// Print the array and its length\n\nconsole.log('Numbers:', numbers)\nconsole.log('Number of numbers:', numbers.length)\n\nconsole.log('Fruits:', fruits)\nconsole.log('Number of fruits:', fruits.length)\n\nconsole.log('Vegetables:', vegetables)\nconsole.log('Number of vegetables:', vegetables.length)\n\nconsole.log('Animal products:', animalProducts)\nconsole.log('Number of animal products:', animalProducts.length)\n\nconsole.log('Web technologies:', webTechs)\nconsole.log('Number of web technologies:', webTechs.length)\n\nconsole.log('Countries:', countries)\nconsole.log('Number of countries:', countries.length)\n`\n\n`sh\nNumbers: [0, 3.14, 9.81, 37, 98.6, 100]\nNumber of numbers: 6\nFruits: ['banana', 'orange', 'mango', 'lemon']\nNumber of fruits: 4\nVegetables: ['Tomato', 'Potato', 'Cabbage', 'Onion', 'Carrot']\nNumber of vegetables: 5\nAnimal products: ['milk', 'meat', 'butter', 'yoghurt']\nNumber of animal products: 4\nWeb technologies: ['HTML', 'CSS', 'JS', 'React', 'Redux', 'Node', 'MongDB']\nNumber of web technologies: 7\nCountries: ['Finland', 'Estonia', 'Denmark', 'Sweden', 'Norway']\nNumber of countries: 5\n`\n\n- Array can have items of different data types\n\n`js\nconst arr = [\n    'Asabeneh',\n    250,\n    true,\n    { country: 'Finland', city: 'Helsinki' },\n    { skills: ['HTML', 'CSS', 'JS', 'React', 'Python'] }\n] // arr containing different data types\nconsole.log(arr)\n`\n\nCreating an array using split\n\nAs we have seen in the earlier section, we can split a string at different positions, and we can change to an array. Let us see the examples below.\n\n`js\nlet js = 'JavaScript'\nconst charsInJavaScript = js.split('')\n\nconsole.log(charsInJavaScript) // [\"J\", \"a\", \"v\", \"a\", \"S\", \"c\", \"r\", \"i\", \"p\", \"t\"]\n\nlet companiesString = 'Facebook, Google, Microsoft, Apple, IBM, Oracle, Amazon'\nconst companies = companiesString.split(',')\n\nconsole.log(companies) // [\"Facebook\", \" Google\", \" Microsoft\", \" Apple\", \" IBM\", \" Oracle\", \" Amazon\"]\nlet txt =\n  'I love teaching and empowering people. I teach HTML, CSS, JS, React, Python.'\nconst words = txt.split(' ')\n\nconsole.log(words)\n// the text has special characters think how you can just get only the words\n// [\"I\", \"love\", \"teaching\", \"and\", \"empowering\", \"people.\", \"I\", \"teach\", \"HTML,\", \"CSS,\", \"JS,\", \"React,\", \"Python\"]\n`\n\nAccessing array items using index\n\nWe access each element in an array using their index. An array index starts from 0. The picture below clearly shows the index of each element in the array.\n\n![arr index](../images/array_index.png)\n\n`js\nconst fruits = ['banana', 'orange', 'mango', 'lemon']\nlet firstFruit = fruits[0] // we are accessing the first item using its index\n\nconsole.log(firstFruit) // banana\n\nsecondFruit = fruits[1]\nconsole.log(secondFruit) // orange\n\nlet lastFruit = fruits[3]\nconsole.log(lastFruit) // lemon\n// Last index can be calculated as follows\n\nlet lastIndex = fruits.length - 1\nlastFruit = fruits[lastIndex]\n\nconsole.log(lastFruit)  // lemon\n`\n\n`js\nconst numbers = [0, 3.14, 9.81, 37, 98.6, 100]  // set of numbers\n\nconsole.log(numbers.length)  // => to know the size of the array, which is 6\nconsole.log(numbers)         // -> [0, 3.14, 9.81, 37, 98.6, 100]\nconsole.log(numbers[0])      //  -> 0\nconsole.log(numbers[5])      //  -> 100\n\nlet lastIndex = numbers.length - 1;\nconsole.log(numbers[lastIndex]) // -> 100\n`\n\n`js\nconst webTechs = [\n  'HTML',\n  'CSS',\n  'JavaScript',\n  'React',\n  'Redux',\n  'Node',\n  'MongoDB'\n] // List of web technologies\n\nconsole.log(webTechs)        // all the array items\nconsole.log(webTechs.length) // => to know the size of the array, which is 7\nconsole.log(webTechs[0])     //  -> HTML\nconsole.log(webTechs[6])     //  -> MongoDB\n\nlet lastIndex = webTechs.length - 1\nconsole.log(webTechs[lastIndex]) // -> MongoDB\n`\n\n`js\nconst countries = [\n  'Albania',\n  'Bolivia',\n  'Canada',\n  'Denmark',\n  'Ethiopia',\n  'Finland',\n  'Germany',\n  'Hungary',\n  'Ireland',\n  'Japan',\n  'Kenya'\n] // List of countries\n\nconsole.log(countries)      // -> all countries in array\nconsole.log(countries[0])   //  -> Albania\nconsole.log(countries[10])  //  -> Kenya\n\nlet lastIndex = countries.length - 1;\nconsole.log(countries[lastIndex]) //  -> Kenya\n`\n\n`js\nconst shoppingCart = [\n  'Milk',\n  'Mango',\n  'Tomato',\n  'Potato',\n  'Avocado',\n  'Meat',\n  'Eggs',\n  'Sugar'\n] // List of food products\n\nconsole.log(shoppingCart) // -> all shoppingCart in array\nconsole.log(shoppingCart[0]) //  -> Milk\nconsole.log(shoppingCart[7]) //  -> Sugar\n\nlet lastIndex = shoppingCart.length - 1;\nconsole.log(shoppingCart[lastIndex]) //  -> Sugar\n`\n\nModifying array element\n\nAn array is mutable(modifiable). Once an array is created, we can modify the contents of the array elements.\n\n`js\nconst numbers = [1, 2, 3, 4, 5]\nnumbers[0] = 10      // changing 1 at index 0 to 10\nnumbers[1] = 20      // changing  2 at index 1 to 20\n\nconsole.log(numbers) // [10, 20, 3, 4, 5]\n\nconst countries = [\n  'Albania',\n  'Bolivia',\n  'Canada',\n  'Denmark',\n  'Ethiopia',\n  'Finland',\n  'Germany',\n  'Hungary',\n  'Ireland',\n  'Japan',\n  'Kenya'\n]\n\ncountries[0] = 'Afghanistan'  // Replacing Albania by Afghanistan\nlet lastIndex = countries.length - 1\ncountries[lastIndex] = 'Korea' // Replacing Kenya by Korea\n\nconsole.log(countries)\n`\n\n`sh\n[\"Afghanistan\", \"Bolivia\", \"Canada\", \"Denmark\", \"Ethiopia\", \"Finland\", \"Germany\", \"Hungary\", \"Ireland\", \"Japan\", \"Korea\"]\n`\n\nMethods to manipulate array\n\nThere are different methods to manipulate an array. These are some of the available methods to deal with arrays:_Array, length, concat, indexOf, slice, splice, join, toString, includes, lastIndexOf, isArray, fill, push, pop, shift, unshift_\n\nArray Constructor\n\nArray:To create an array.\n\n`js\nconst arr = Array() // creates an an empty array\nconsole.log(arr)\n\nconst eightEmptyValues = Array(8) // it creates eight empty values\nconsole.log(eightEmptyValues) // [empty x 8]\n`\n\nCreating static values with fill\n\nfill: Fill all the array elements with a static value\n\n`js\nconst arr = Array() // creates an an empty array\nconsole.log(arr)\n\nconst eightXvalues = Array(8).fill('X') // it creates eight element values filled with 'X'\nconsole.log(eightXvalues) // ['X', 'X','X','X','X','X','X','X']\n\nconst eight0values = Array(8).fill(0) // it creates eight element values filled with '0'\nconsole.log(eight0values) // [0, 0, 0, 0, 0, 0, 0, 0]\n\nconst four4values = Array(4).fill(4) // it creates 4 element values filled with '4'\nconsole.log(four4values) // [4, 4, 4, 4]\n`\n\nConcatenating array using concat\n\nconcat:To concatenate two arrays.\n\n`js\nconst firstList = [1, 2, 3]\nconst secondList = [4, 5, 6]\nconst thirdList = firstList.concat(secondList)\n\nconsole.log(thirdList) // [1, 2, 3, 4, 5, 6]\n`\n\n`js\nconst fruits = ['banana', 'orange', 'mango', 'lemon']                 // array of fruits\nconst vegetables = ['Tomato', 'Potato', 'Cabbage', 'Onion', 'Carrot'] // array of vegetables\nconst fruitsAndVegetables = fruits.concat(vegetables)                 // concatenate the two arrays\n\nconsole.log(fruitsAndVegetables)\n`\n\n`sh\n[\"banana\", \"orange\", \"mango\", \"lemon\", \"Tomato\", \"Potato\", \"Cabbage\", \"Onion\", \"Carrot\"]\n`\n\nGetting array length\n\nLength:To know the size of the array\n\n`js\nconst numbers = [1, 2, 3, 4, 5]\nconsole.log(numbers.length) // -> 5 is the size of the array\n`\n\nGetting index an element in arr array\n\nindexOf:To check if an item exist in an array. If it exists it returns the index else it returns -1.\n\n`js\nconst numbers = [1, 2, 3, 4, 5]\n\nconsole.log(numbers.indexOf(5)) // -> 4\nconsole.log(numbers.indexOf(0)) // -> -1\nconsole.log(numbers.indexOf(1)) // -> 0\nconsole.log(numbers.indexOf(6)) // -> -1\n`\n\nCheck an element if it exist in an array.\n\n- Check items in a list\n  \n`js\n// let us check if a banana exist in the array\n\nconst fruits = ['banana', 'orange', 'mango', 'lemon']\nlet index = fruits.indexOf('banana')  // 0\n\nif(index === -1){\n   console.log('This fruit does not exist in the array')  \n} else {\n    console.log('This fruit does exist in the array')\n}\n// This fruit does exist in the array\n\n// we can use also ternary here\nindex === -1 ? console.log('This fruit does not exist in the array'): console.log('This fruit does exist in the array')\n\n// let us check if an avocado exist in the array\nlet indexOfAvocado = fruits.indexOf('avocado')  // -1, if the element not found index is -1\nif(indexOfAvocado === -1){\n   console.log('This fruit does not exist in the array')  \n} else {\n    console.log('This fruit does exist in the array')\n}\n// This fruit does not exist in the array\n`\n\nGetting last index of an element in array\n\nlastIndexOf: It gives the position of the last item in the array. If it exist, it returns the index else it returns -1.\n\n`js\nconst numbers = [1, 2, 3, 4, 5, 3, 1, 2]\n\nconsole.log(numbers.lastIndexOf(2)) // 7\nconsole.log(numbers.lastIndexOf(0)) // -1\nconsole.log(numbers.lastIndexOf(1)) //  6\nconsole.log(numbers.lastIndexOf(4)) //  3\nconsole.log(numbers.lastIndexOf(6)) // -1\n`\n\nincludes:To check if an item exist in an array. If it exist it returns the true else it returns false.\n\n`js\nconst numbers = [1, 2, 3, 4, 5]\n\nconsole.log(numbers.includes(5)) // true\nconsole.log(numbers.includes(0)) // false\nconsole.log(numbers.includes(1)) // true\nconsole.log(numbers.includes(6)) // false\n\nconst webTechs = [\n  'HTML',\n  'CSS',\n  'JavaScript',\n  'React',\n  'Redux',\n  'Node',\n  'MongoDB'\n] // List of web technologies\n\nconsole.log(webTechs.includes('Node'))  // true\nconsole.log(webTechs.includes('C'))     // false\n`\n\nChecking array\n\nArray.isArray:To check if the data type is an array\n\n`js\nconst numbers = [1, 2, 3, 4, 5]\nconsole.log(Array.isArray(numbers)) // true\n\nconst number = 100\nconsole.log(Array.isArray(number)) // false\n`\n\nConverting array to string\n\ntoString:Converts array to string\n\n`js\nconst numbers = [1, 2, 3, 4, 5]\nconsole.log(numbers.toString()) // 1,2,3,4,5\n\nconst names = ['Asabeneh', 'Mathias', 'Elias', 'Brook']\nconsole.log(names.toString()) // Asabeneh,Mathias,Elias,Brook\n`\n\nJoining array elements\n\njoin: It is used to join the elements of the array, the argument we passed in the join method will be joined in the array and return as a string. By default, it joins with a comma, but we can pass different string parameter which can be joined between the items.\n\n`js\nconst numbers = [1, 2, 3, 4, 5]\nconsole.log(numbers.join()) // 1,2,3,4,5\n\nconst names = ['Asabeneh', 'Mathias', 'Elias', 'Brook']\n\nconsole.log(names.join()) // Asabeneh,Mathias,Elias,Brook\nconsole.log(names.join('')) //AsabenehMathiasEliasBrook\nconsole.log(names.join(' ')) //Asabeneh Mathias Elias Brook\nconsole.log(names.join(', ')) //Asabeneh, Mathias, Elias, Brook\nconsole.log(names.join(' ')) //Asabeneh Mathias Elias Brook\n\nconst webTechs = [\n  'HTML',\n  'CSS',\n  'JavaScript',\n  'React',\n  'Redux',\n  'Node',\n  'MongoDB'\n] // List of web technologies\n\nconsole.log(webTechs.join())       // \"HTML,CSS,JavaScript,React,Redux,Node,MongoDB\"\nconsole.log(webTechs.join(' '))  // \"HTML CSS JavaScript React Redux Node MongoDB\"\n`\n\nSlice array elements\n\nSlice: To cut out a multiple items in range. It takes two parameters:starting and ending position. It doesn't include the ending position.\n\n`js\n  const numbers = [1,2,3,4,5]\n\n  console.log(numbers.slice()) // -> it copies all  item\n  console.log(numbers.slice(0)) // -> it copies all  item\n  console.log(numbers.slice(0, numbers.length)) // it copies all  item\n  console.log(numbers.slice(1,4)) // -> [2,3,4] // it doesn't include the ending position\n`\n\nSplice method in array\n\nSplice: It takes three parameters:Starting position, number of times to be removed and number of items to be added.\n\n`js\n  const numbers = [1, 2, 3, 4, 5]\n  numbers.splice()\n  console.log(numbers)                // -> remove all items\n\n`\n\n`js\n  const numbers = [1, 2, 3, 4, 5]\n\tnumbers.splice(0,1)\n  console.log(numbers)            // remove the first item\n`\n\n`js\n  const numbers = [1, 2, 3, 4, 5, 6]\n\tnumbers.splice(3, 3, 7, 8, 9)\n  console.log(numbers.splice(3, 3, 7, 8, 9))  // -> [1, 2, 3, 7, 8, 9] //it removes three item and replace three items\n`\n\nAdding item to an array using push\n\nPush: adding item in the end. To add item to the end of an existing array we use the push method.\n\n`js\n// syntax\nconst arr  = ['item1', 'item2','item3']\narr.push('new item')\nconsole.log(arr)\n// ['item1', 'item2','item3','new item']\n`\n\n`js\nconst numbers = [1, 2, 3, 4, 5]\nnumbers.push(6)\nconsole.log(numbers) // -> [1,2,3,4,5,6]\n\nnumbers.pop() // -> remove one item from the end\nconsole.log(numbers) // -> [1,2,3,4,5]\n`\n\n`js\nlet fruits = ['banana', 'orange', 'mango', 'lemon']\nfruits.push('apple')\nconsole.log(fruits)    // ['banana', 'orange', 'mango', 'lemon', 'apple']\n\nfruits.push('lime')\nconsole.log(fruits)   // ['banana', 'orange', 'mango', 'lemon', 'apple', 'lime']\n`\n\nRemoving the end element using pop\n\npop: Removing item in the end.\n\n`js\nconst numbers = [1, 2, 3, 4, 5]\nnumbers.pop() // -> remove one item from the end\nconsole.log(numbers) // -> [1,2,3,4]\n`\n\nRemoving an element from the beginning\n\nshift: Removing one array element in the beginning of the array.\n\n`js\nconst numbers = [1, 2, 3, 4, 5]\nnumbers.shift() // -> remove one item from the beginning\nconsole.log(numbers) // -> [2,3,4,5]\n`\n\nAdd an element from the beginning\n\nunshift: Adding array element in the beginning of the array.\n\n`js\nconst numbers = [1, 2, 3, 4, 5]\nnumbers.unshift(0) // -> add one item from the beginning\nconsole.log(numbers) // -> [0,1,2,3,4,5]\n`\n\nReversing array order\n\nreverse: reverse the order of an array.\n\n`js\nconst numbers = [1, 2, 3, 4, 5]\nnumbers.reverse() // -> reverse array order\nconsole.log(numbers) // [5, 4, 3, 2, 1]\n\nnumbers.reverse()\nconsole.log(numbers) // [1, 2, 3, 4, 5]\n`\n\nSorting elements in array\n\nsort: arrange array elements in ascending order. Sort takes a call back function, we will see how we use sort with a call back function in the coming sections.\n\n`js\nconst webTechs = [\n  'HTML',\n  'CSS',\n  'JavaScript',\n  'React',\n  'Redux',\n  'Node',\n  'MongoDB'\n]\n\nwebTechs.sort()\nconsole.log(webTechs) // [\"CSS\", \"HTML\", \"JavaScript\", \"MongoDB\", \"Node\", \"React\", \"Redux\"]\n\nwebTechs.reverse() // after sorting we can reverse it\nconsole.log(webTechs) // [\"Redux\", \"React\", \"Node\", \"MongoDB\", \"JavaScript\", \"HTML\", \"CSS\"]\n`\n\nArray of arrays\n\nArray can store different data types including an array itself. Let us create an array of arrays\n\n`js\nconst firstNums = [1, 2, 3]\nconst secondNums = [1, 4, 9]\n\nconst arrayOfArray =  [[1, 2, 3], [1, 2, 3]]\nconsole.log(arrayOfArray[0]) // [1, 2, 3]\n\n const frontEnd = ['HTML', 'CSS', 'JS', 'React', 'Redux']\n const backEnd = ['Node','Express', 'MongoDB']\n const fullStack = [frontEnd, backEnd]\n console.log(fullStack)   // [[\"HTML\", \"CSS\", \"JS\", \"React\", \"Redux\"], [\"Node\", \"Express\", \"MongoDB\"]]\n console.log(fullStack.length)  // 2\n console.log(fullStack[0])  // [\"HTML\", \"CSS\", \"JS\", \"React\", \"Redux\"]\n console.log(fullStack[1]) // [\"Node\", \"Express\", \"MongoDB\"]\n`\n\nðŸŒ•  You are diligent and you have already achieved quite a lot. You have just completed day 5 challenges and you are 5 steps a head in to your way to greatness. Now do some exercises for your brain and for your muscle.",
      "codeExample": "// syntax\nconst arr = Array()\n// or\n// let arr = new Array()\nconsole.log(arr) // []",
      "keyPoints": [
        "Using Array constructor",
        "Using square brackets([])",
        "Array can have items of different data types",
        "Check items in a list"
      ],
      "quiz": {
        "question": "What is the main concept covered in this lesson?",
        "options": [
          "Option A",
          "Option B",
          "Option C",
          "Option D"
        ],
        "correctAnswer": 0,
        "explanation": "This covers the main concept discussed in the lesson."
      },
      "tags": [
        "fundamentals",
        "day-5"
      ]
    },
    {
      "id": "fundamentals-005-003",
      "title": "Arrays - Part 3",
      "day": 5,
      "category": "fundamentals",
      "difficulty": "beginner",
      "estimatedTime": "2 min",
      "description": "ðŸ’» Exercise\n\n### Exercise: Level 1\n\n```js\nconst countries = [\n  'Albania',\n  'Bolivia',\n  'Canada',\n  'Denmark',\n  'Ethiopia',\n  'Finland',\n  'Germany...",
      "content": "ðŸ’» Exercise\n\nExercise: Level 1\n\n`js\nconst countries = [\n  'Albania',\n  'Bolivia',\n  'Canada',\n  'Denmark',\n  'Ethiopia',\n  'Finland',\n  'Germany',\n  'Hungary',\n  'Ireland',\n  'Japan',\n  'Kenya'\n]\n\nconst webTechs = [\n  'HTML',\n  'CSS',\n  'JavaScript',\n  'React',\n  'Redux',\n  'Node',\n  'MongoDB'\n]\n`\n\n1. Declare an _empty_ array;\n2. Declare an array with more than 5 number of elements\n3. Find the length of your array\n4. Get the first item, the middle item and the last item of the array\n5. Declare an array called _mixedDataTypes_, put different data types in the array and find the length of the array. The array size should  be greater than 5\n6. Declare an array variable name itCompanies and assign initial values Facebook, Google, Microsoft, Apple, IBM, Oracle and Amazon\n7. Print the array using _console.log()_\n8. Print the number of companies in the array\n9. Print the first company, middle and last company\n10. Print out each company\n11. Change each company name  to uppercase one by one and print them out\n12. Print the array like as a sentence: Facebook, Google, Microsoft, Apple, IBM,Oracle and Amazon are big IT companies.\n13. Check if a certain company exists in the itCompanies array. If it exist return the company else return a company is _not found_\n14. Filter out companies which have more than one 'o' without the filter method\n15. Sort the array using _sort()_ method\n16. Reverse the array using _reverse()_ method\n17. Slice out the first 3 companies from the array\n18. Slice out the last 3 companies from the array\n19. Slice out the middle IT company or companies from the array\n20. Remove the first IT company from the array\n21. Remove the middle IT company or companies from the array\n22. Remove the last IT company from the array\n23. Remove all IT companies\n\nExercise: Level 2\n\n1. Create a separate countries.js file and store the countries array in to this file, create a separate file web_techs.js and store the webTechs array in to this file. Access both file in main.js file\n1. First remove all the punctuations and change the string to array and count the number of words in the array\n\n    `js\n    let text =\n    'I love teaching and empowering people. I teach HTML, CSS, JS, React, Python.'\n    console.log(words)\n    console.log(words.length)\n    `\n\n    `sh\n    [\"I\", \"love\", \"teaching\", \"and\", \"empowering\", \"people\", \"I\", \"teach\", \"HTML\", \"CSS\", \"JS\", \"React\", \"Python\"]\n  \n    13\n    `\n\n1. In the following shopping cart add, remove, edit items\n\n    `js\n    const shoppingCart = ['Milk', 'Coffee', 'Tea', 'Honey']\n    `\n\n   - add 'Meat' in the beginning of your shopping cart if it has not been already added\n   - add Sugar at the end of you shopping cart if it has not been already added\n   - remove 'Honey' if you are allergic to honey\n   - modify Tea to 'Green Tea'\n1. In countries array check if 'Ethiopia' exists in the array if it exists print 'ETHIOPIA'. If it does not exist add to the countries list.\n1. In the webTechs array check if Sass exists in the array  and if it exists print 'Sass is a CSS preprocess'. If it does not exist add Sass to the array and print the array.\n1. Concatenate the following two variables and store it in a fullStack variable.\n\n    `js\n    const frontEnd = ['HTML', 'CSS', 'JS', 'React', 'Redux']\n    const backEnd = ['Node','Express', 'MongoDB']\n  \n    console.log(fullStack)\n    `\n\n    `sh\n    [\"HTML\", \"CSS\", \"JS\", \"React\", \"Redux\", \"Node\", \"Express\", \"MongoDB\"]\n    `\n\nExercise: Level 3\n\n1. The following is an array of 10 students ages:\n\n    `js\n    const ages = [19, 22, 19, 24, 20, 25, 26, 24, 25, 24]\n    `\n\n    - Sort the array and find the min and max age\n    - Find the median age(one middle item or two middle items divided by two)\n    - Find the average age(all items divided by number of items)\n    - Find the range of the ages(max minus min)\n    - Compare the value of (min - average) and (max - average), use _abs()_ method\n1.Slice the first ten countries from the [countries array](https://github.com/Asabeneh/30DaysOfJavaScript/tree/master/data/countries.js)\n1. Find the middle country(ies) in the [countries array](https://github.com/Asabeneh/30DaysOfJavaScript/tree/master/data/countries.js)\n2. Divide the countries array into two equal arrays if it is even.  If countries array is not even , one more country for the first half.\n  \nðŸŽ‰ CONGRATULATIONS ! ðŸŽ‰\n\n[<< Day 4](../04_Day_Conditionals/04_day_Conditionals.md) | [Day 6 >>](../06_Day_Loops/06_day_loops.md)",
      "codeExample": "const countries = [\n  'Albania',\n  'Bolivia',\n  'Canada',\n  'Denmark',\n  'Ethiopia',\n  'Finland',\n  'Germany',\n  'Hungary',\n  'Ireland',\n  'Japan',\n  'Kenya'\n]\n\nconst webTechs = [\n  'HTML',\n  'CSS',\n  'JavaScript',\n  'React',\n  'Redux',\n  'Node',\n  'MongoDB'\n]",
      "keyPoints": [
        "add 'Meat' in the beginning of your shopping cart if it has not been already added",
        "add Sugar at the end of you shopping cart if it has not been already added",
        "remove 'Honey' if you are allergic to honey",
        "modify Tea to 'Green Tea'"
      ],
      "quiz": {
        "question": "What is the main concept covered in this lesson?",
        "options": [
          "Option A",
          "Option B",
          "Option C",
          "Option D"
        ],
        "correctAnswer": 0,
        "explanation": "This covers the main concept discussed in the lesson."
      },
      "tags": [
        "fundamentals",
        "day-5"
      ]
    }
  ]
}