{
  "metadata": {
    "fileId": "functions-020",
    "topic": "functions",
    "subtopic": "20_day_writing_clean_codes",
    "partNumber": 1,
    "totalParts": 1,
    "cardCount": 2,
    "difficulty": "intermediate",
    "estimatedTime": "6 min",
    "prerequisites": [
      "day-19"
    ],
    "tags": [
      "functions",
      "day-20"
    ],
    "version": "1.0.0",
    "createdAt": "2025-08-07T08:51:50.160Z",
    "updatedAt": "2025-08-07T08:51:50.160Z"
  },
  "cards": [
    {
      "id": "functions-020-001",
      "title": "20_day_writing_clean_codes",
      "day": 20,
      "category": "functions",
      "difficulty": "intermediate",
      "estimatedTime": "3 min",
      "description": "<div align=\"center\">\n  <h1> 30 Days Of JavaScript: Writing Clean Codes</h1>\n  <a class=\"header-badge\" target=\"_blank\" href=\"https://www....",
      "content": "<div align=\"center\">\n  <h1> 30 Days Of JavaScript: Writing Clean Codes</h1>\n  <a class=\"header-badge\" target=\"_blank\" href=\"https://www.linkedin.com/in/asabeneh/\">\n  <img src=\"https://img.shields.io/badge/style--5eba00.svg?label=LinkedIn&logo=linkedin&style=social\">\n  </a>\n  <a class=\"header-badge\" target=\"_blank\" href=\"https://twitter.com/Asabeneh\">\n  <img alt=\"Twitter Follow\" src=\"https://img.shields.io/twitter/follow/asabeneh?style=social\">\n  </a>\n\n<sub>Author:\n<a href=\"https://www.linkedin.com/in/asabeneh/\" target=\"_blank\">Asabeneh Yetayeh</a><br>\n<small> January, 2020</small>\n</sub>\n\n</div>\n\n[<< Day 19](../19_Day_Closuers/19_day_closures.md) | [Day 21 >>](../21_Day_DOM/21_day_dom.md)\n\n![Thirty Days Of JavaScript](../images/banners/day_1_20.png)\n- [Day 20](day-20)\n\t- [Writing clean code](writing-clean-code)\n\t\t- [JavaScript Style Guide](javascript-style-guide)\n\t\t- [Why we need style guide](why-we-need-style-guide)\n\t\t\t- [Airbnb JavaScript Style Guide](airbnb-javascript-style-guide)\n\t\t\t- [Standard JavaScript Style Guide](standard-javascript-style-guide)\n\t\t\t- [Google JavaScript Style Guide](google-javascript-style-guide)\n\t\t- [JavaScript Coding Conventions](javascript-coding-conventions)\n\t\t\t- [Conventions use in 30DaysOfJavaScript](conventions-use-in-30daysofjavascript)\n\t\t\t- [Variables](variables)\n\t\t\t- [Arrays](arrays)\n\t\t\t- [Functions](functions)\n\t\t\t- [Loops](loops)\n\t\t\t- [Objects](objects)\n\t\t\t- [Conditional](conditional)\n\t\t\t- [Classes](classes)\n\nDay 20",
      "codeExample": "let firstName = 'Asabeneh'\nlet lastName = 'Yetayeh'\nlet country = 'Finland'\nlet city = 'Helsinki'\n\nconst PI = Math.PI\nconst gravity = 9.81",
      "keyPoints": [
        "[Day 20](#day-20)",
        "[Writing clean code](#writing-clean-code)",
        "[JavaScript Style Guide](#javascript-style-guide)",
        "[Why we need style guide](#why-we-need-style-guide)"
      ],
      "quiz": {
        "question": "What is the main concept covered in this lesson?",
        "options": [
          "Option A",
          "Option B",
          "Option C",
          "Option D"
        ],
        "correctAnswer": 0,
        "explanation": "This covers the main concept discussed in the lesson."
      },
      "tags": [
        "functions",
        "day-20"
      ]
    },
    {
      "id": "functions-020-002",
      "title": "20_day_writing_clean_codes - Part 2",
      "day": 20,
      "category": "functions",
      "difficulty": "intermediate",
      "estimatedTime": "2 min",
      "description": "Writing clean code\n\n### JavaScript Style Guide\n\nA JavaScript style guide is a set of standards that tells how JavaScript code should be written and or...",
      "content": "Writing clean code\n\nJavaScript Style Guide\n\nA JavaScript style guide is a set of standards that tells how JavaScript code should be written and organized. In this section, we will talk about JavaScript guides and how to write a clean code.\n\nJavaScript is a programming language and like human language it has syntax. The syntax of JavaScript has to be written following a certain style guideline for sake of convince and simplicity.\n\nWhy we need style guide\n\nYou have been coding alone for so long but now it seems to work in a team. It does not matter in anyway you write you code as long as it running, however when you work in team of 10 or 20 or more developer on one project and on the same code base, the code will be messy and hard to manage if there is no any guidelines to follow.\n\nYou can develop your own guidelines and conventions or you can also adapt well developed guidelines. Let us the most common know guidelines.\nMost common JavaScript Style Guides\n\n- Airbnb JavaScript Style Guide\n- JavaScript Standard Style Guide\n- Google JavaScript Style Guide\n\nAirbnb JavaScript Style Guide\n\nAirbnb has one of the most popular JavaScript style guides on the internet. It covers nearly every aspect of JavaScript as well  and it is adopted by many developer and companies. You may checkout the [Airbnb style guide](https://github.com/airbnb/javascript). I would also recommend to try it. Their style is very easy to use and simple to understand.\n\nStandard JavaScript Style Guide\n\nThis is guideline is not as popular as Airbnb but it worth to look at it. They removed the semicolon in their [style guide](https://standardjs.com/).\n\nGoogle JavaScript Style Guide\n\nI do not say much about Googles guideline and I did not use rather I would suggest you to have a look from this [link](https://google.github.io/styleguide/jsguide.html).\n\nJavaScript Coding Conventions\n\nIn this challenge also we used the general JavaScript coding writing conventions and guides. Coding conventions are style guidelines for programming which are developed by an individual, a team or a company.\n\nCoding conventions helps:\n\n- to write clean code\n- to improve code readability\n- to improve code re-useability and maintainability\n\nCoding conventions includes\n\n- Naming and declaration rules for variables\n- Naming and declaration rules for functions\n- Rules for the use of white space, indentation, and comments\n- Programming practices and principles\n\nConventions use in 30DaysOfJavaScript\n\nIn this challenge we follow the regular JavaScript convention but I added also my preference of writing. \n\n- We used camelCase for variables and functions.\n- All variable names start with a letter.\n- We chose to use const for constants, arrays, objects and functions. In stead of double quote, we chose to use single quote or backtick. Single quote is becoming trendy.\n- We also removed semicolons from our code but it is a matter of personal preference.\n- Space around arithmetic operators, assignment operators and after comma\n- Arrow function instead of function declaration\n- Explicit return instead of implicit return if the function is one liner\n- No trailing comma in the last value of an object\n- We prefer this +=, -=, = /=, *= instead of the longer version\n- When we use console.log() it is good to print with a tag string to identify from where the console is coming\n\nVariables\n\n`js\n\nlet firstName = 'Asabeneh'\nlet lastName = 'Yetayeh'\nlet country = 'Finland'\nlet city = 'Helsinki'\n\nconst PI = Math.PI\nconst gravity = 9.81\n`\n\nArrays\n\nWe chose to make array names plural\n\n- names\n- numbers\n- countries\n- languages\n- skills\n- fruits\n- vegetables\n\n`js\n// arrays\nconst names = ['Asabeneh', 'Mathias', 'Elias', 'Brook']\nconst numbers = [0, 3.14, 9.81, 37, 98.6, 100]\nconst countries = ['Finland', 'Denmark', 'Sweden', 'Norway', 'Iceland']\nconst languages = ['Amharic', 'Arabic', 'English', 'French', 'Spanish']\nconst skills = ['HTML', 'CSS', 'JavaScript', 'React', 'Python']\nconst fruits = ['banana', 'orange', 'mango', 'lemon']\nconst vegetables = ['Tomato', 'Potato', 'Cabbage', 'Onion', 'Carrot']\n`\n\nFunctions\n\nBy now you are very familiar function declaration, expression function, arrow function and anonymous function. In this challenge we tend to use arrow function instead of other functions. Arrow function is not a replacement for other functions. In addition, arrow functions and function declarations are not exactly the same. So you should know when to use and when not. I will cover the difference in detail in other sections. We will use explicit return instead of implicit return if the function is one liner\n\n`js\n// function which return full name of a person\nconst printFullName = (firstName, lastName) => firstName + ' ' + lastName\n\n// function which calculates a square of a number\nconst square = (n) => n * n\n\n// a function which generate random hexa colors\nconst hexaColor = () => {\n  const str = '0123456789abcdef'\n  let hexa = ''\n  let index\n  for (let i = 0; i < 6; i++) {\n    index = Math.floor(Math.random() * str.length)\n    hexa += str[index]\n  }\n  return hexa\n}\n\n// a function which shows date and time\nconst showDateTime = () => {\n  const now = new Date()\n  const year = now.getFullYear()\n  const month = now.getMonth() + 1\n  const date = now.getDate()\n  let hours = now.getHours()\n  let minutes = now.getMinutes()\n  if (hours < 10) {\n    hours = '0' + hours\n  }\n  if (minutes < 10) {\n    minutes = '0' + minutes\n  }\n\n  const dateMonthYear = date + '.' + month + '.' + year\n  const time = hours + ':' + minutes\n  const fullTime = dateMonthYear + ' ' + time\n  return fullTime\n}\n`\n\nThe new Dat().toLocaleString() can also be used to display current date time. The toLocaleString() methods takes different arguments. You may learn more about date and time from this [link](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString).\n\nLoops\n\nWe coverer many types of loops in this challenges. The regular for loop, while loop, do while loop, for of loop, forEach loop and for in loop.\nLets see how we use them:\n\n`js\nfor (let i = 0; i < n; i++){\n    console.log()\n}\n\n// declaring an array variable\nconst names = ['Asabeneh', 'Mathias', 'Elias', 'Brook']\n\n// iterating an array using regular for loop\nlet len = names.length;\nfor(let i = 0; i < len; i++){\n    console.log(names[i].toUpperCase())\n}\n\n\n// iterating an array using for of\nfor( const name of names) {\n    console.log(name.toUpperCase())\n}\n\n// iterating array using forEach \nnames.forEach((name) => name.toUpperCase())\n\n\nconst person = {\n  firstName: 'Asabeneh',\n  lastName: 'Yetayeh',\n  age: 250,\n  country: 'Finland',\n  city: 'Helsinki',\n  skills: ['HTML','CSS','JavaScript','React','Node','MongoDB','Python','D3.js'],\n  isMarried: true\n}\nfor(const key in person) {\n    console.log(key)\n}\n\n`\n\nObjects\n\nWe declare object literal with const.\n\n`js\n// declaring object literal\nconst person = {\n  firstName: 'Asabeneh',\n  lastName: 'Yetayeh',\n  age: 250,\n  country: 'Finland',\n  city: 'Helsinki',\n  skills: ['HTML','CSS','JavaScript','TypeScript', 'React','Node','MongoDB','Python','D3.js'],\n  isMarried: true\n}\n// iterating through object keys\nfor(const key in person) {\n    console.log(key, person[key])\n}\n\n`\n\nConditional\n\n We say if, if else, if else if else, switch and ternary operators in previous challenges.\n\n `js\n // syntax\nif (condition) {\n  // this part of code run for truthy condition\n} else {\n  // this part of code run for false condition\n}\n `\n\n `js\n // if else\nlet num = 3\nif (num > 0) {\n  console.log(${num} is a positive number)\n} else {\n  console.log(${num} is a negative number)\n}\n//  3 is a positive number\n `\n\n `js\n // if else if else if else\n\nlet a = 0\nif (a > 0) {\n  console.log(${a} is a positive number)\n} else if (a < 0) {\n  console.log(${a} is a negative number)\n} else if (a == 0) {\n  console.log(${a} is zero)\n} else {\n  console.log(${a} is not a number)\n}\n `\n\n `js\n // Switch More Examples\nlet dayUserInput = prompt('What day is today ?')\nlet day = dayUserInput.toLowerCase()\n\nswitch (day) {\n  case 'monday':\n    console.log('Today is Monday')\n    break\n  case 'tuesday':\n    console.log('Today is Tuesday')\n    break\n  case 'wednesday':\n    console.log('Today is Wednesday')\n    break\n  case 'thursday':\n    console.log('Today is Thursday')\n    break\n  case 'friday':\n    console.log('Today is Friday')\n    break\n  case 'saturday':\n    console.log('Today is Saturday')\n    break\n  case 'sunday':\n    console.log('Today is Sunday')\n    break\n  default:\n    console.log('It is not a week day.')\n}\n `\n\n `js\n // ternary\n\n let isRaining = true\nisRaining\n  ? console.log('You need a rain coat.')\n  : console.log('No need for a rain coat.')\n `\n\nClasses\n\nWe declare class with CamelCase which starts with capital letter.\n\n`js\n// syntax\nclass ClassName {\n    // code goes here\n}\n`\n\n`js\n// defining class\nclass Person {\n  constructor(firstName, lastName) {\n    console.log(this) // Check the output from here\n    this.firstName = firstName\n    this.lastName = lastName\n  }\n}\n\n`\n\nWhatever style guide you follow be consistent. Follow some programming paradigms and design patterns. Remember, if you do not write you code in certain order or fashion it will be hard to read your code. So, do a favor for yourself or for someone who is going to read your code by writing readable code.\n\n🌕 You are tidy. Now, you knew how to write clean code, so anyone who know the English language can understand your code.  You are always progressing and you are a head of 20 steps to your way to greatness.\n\n🎉 CONGRATULATIONS ! 🎉\n\n[<< Day 19](../19_Day_Closuers/19_day_closures.md) | [Day 21 >>](../21_Day_DOM/21_day_dom.md)",
      "codeExample": "let firstName = 'Asabeneh'\nlet lastName = 'Yetayeh'\nlet country = 'Finland'\nlet city = 'Helsinki'\n\nconst PI = Math.PI\nconst gravity = 9.81",
      "keyPoints": [
        "Airbnb JavaScript Style Guide",
        "JavaScript Standard Style Guide",
        "Google JavaScript Style Guide",
        "to write clean code"
      ],
      "quiz": {
        "question": "What is the main concept covered in this lesson?",
        "options": [
          "Option A",
          "Option B",
          "Option C",
          "Option D"
        ],
        "correctAnswer": 0,
        "explanation": "This covers the main concept discussed in the lesson."
      },
      "tags": [
        "functions",
        "day-20"
      ]
    }
  ]
}